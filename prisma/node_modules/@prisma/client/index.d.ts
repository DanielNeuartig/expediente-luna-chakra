
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Propietario
 * 
 */
export type Propietario = $Result.DefaultSelection<Prisma.$PropietarioPayload>
/**
 * Model Clinica
 * 
 */
export type Clinica = $Result.DefaultSelection<Prisma.$ClinicaPayload>
/**
 * Model VerificacionSMS
 * 
 */
export type VerificacionSMS = $Result.DefaultSelection<Prisma.$VerificacionSMSPayload>
/**
 * Model UsuarioClinica
 * 
 */
export type UsuarioClinica = $Result.DefaultSelection<Prisma.$UsuarioClinicaPayload>
/**
 * Model Acceso
 * 
 */
export type Acceso = $Result.DefaultSelection<Prisma.$AccesoPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Rol: {
  CEO: 'CEO',
  ADMIN: 'ADMIN',
  MEDICO: 'MEDICO',
  AUXILIAR: 'AUXILIAR',
  PROPIETARIO: 'PROPIETARIO'
};

export type Rol = (typeof Rol)[keyof typeof Rol]


export const TipoAcceso: {
  SMS_ENVIO: 'SMS_ENVIO',
  SMS_VERIFICACION: 'SMS_VERIFICACION',
  LOGIN: 'LOGIN',
  REGISTRO: 'REGISTRO',
  SMS_DISPONIBILIDAD: 'SMS_DISPONIBILIDAD'
};

export type TipoAcceso = (typeof TipoAcceso)[keyof typeof TipoAcceso]

}

export type Rol = $Enums.Rol

export const Rol: typeof $Enums.Rol

export type TipoAcceso = $Enums.TipoAcceso

export const TipoAcceso: typeof $Enums.TipoAcceso

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.propietario`: Exposes CRUD operations for the **Propietario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Propietarios
    * const propietarios = await prisma.propietario.findMany()
    * ```
    */
  get propietario(): Prisma.PropietarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clinica`: Exposes CRUD operations for the **Clinica** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clinicas
    * const clinicas = await prisma.clinica.findMany()
    * ```
    */
  get clinica(): Prisma.ClinicaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificacionSMS`: Exposes CRUD operations for the **VerificacionSMS** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificacionSMS
    * const verificacionSMS = await prisma.verificacionSMS.findMany()
    * ```
    */
  get verificacionSMS(): Prisma.VerificacionSMSDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuarioClinica`: Exposes CRUD operations for the **UsuarioClinica** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsuarioClinicas
    * const usuarioClinicas = await prisma.usuarioClinica.findMany()
    * ```
    */
  get usuarioClinica(): Prisma.UsuarioClinicaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.acceso`: Exposes CRUD operations for the **Acceso** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accesos
    * const accesos = await prisma.acceso.findMany()
    * ```
    */
  get acceso(): Prisma.AccesoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Propietario: 'Propietario',
    Clinica: 'Clinica',
    VerificacionSMS: 'VerificacionSMS',
    UsuarioClinica: 'UsuarioClinica',
    Acceso: 'Acceso'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "propietario" | "clinica" | "verificacionSMS" | "usuarioClinica" | "acceso"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Propietario: {
        payload: Prisma.$PropietarioPayload<ExtArgs>
        fields: Prisma.PropietarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PropietarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropietarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PropietarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropietarioPayload>
          }
          findFirst: {
            args: Prisma.PropietarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropietarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PropietarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropietarioPayload>
          }
          findMany: {
            args: Prisma.PropietarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropietarioPayload>[]
          }
          create: {
            args: Prisma.PropietarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropietarioPayload>
          }
          createMany: {
            args: Prisma.PropietarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PropietarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropietarioPayload>[]
          }
          delete: {
            args: Prisma.PropietarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropietarioPayload>
          }
          update: {
            args: Prisma.PropietarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropietarioPayload>
          }
          deleteMany: {
            args: Prisma.PropietarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PropietarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PropietarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropietarioPayload>[]
          }
          upsert: {
            args: Prisma.PropietarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PropietarioPayload>
          }
          aggregate: {
            args: Prisma.PropietarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePropietario>
          }
          groupBy: {
            args: Prisma.PropietarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<PropietarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.PropietarioCountArgs<ExtArgs>
            result: $Utils.Optional<PropietarioCountAggregateOutputType> | number
          }
        }
      }
      Clinica: {
        payload: Prisma.$ClinicaPayload<ExtArgs>
        fields: Prisma.ClinicaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClinicaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClinicaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          findFirst: {
            args: Prisma.ClinicaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClinicaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          findMany: {
            args: Prisma.ClinicaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>[]
          }
          create: {
            args: Prisma.ClinicaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          createMany: {
            args: Prisma.ClinicaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClinicaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>[]
          }
          delete: {
            args: Prisma.ClinicaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          update: {
            args: Prisma.ClinicaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          deleteMany: {
            args: Prisma.ClinicaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClinicaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClinicaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>[]
          }
          upsert: {
            args: Prisma.ClinicaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicaPayload>
          }
          aggregate: {
            args: Prisma.ClinicaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClinica>
          }
          groupBy: {
            args: Prisma.ClinicaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClinicaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClinicaCountArgs<ExtArgs>
            result: $Utils.Optional<ClinicaCountAggregateOutputType> | number
          }
        }
      }
      VerificacionSMS: {
        payload: Prisma.$VerificacionSMSPayload<ExtArgs>
        fields: Prisma.VerificacionSMSFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificacionSMSFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificacionSMSPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificacionSMSFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificacionSMSPayload>
          }
          findFirst: {
            args: Prisma.VerificacionSMSFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificacionSMSPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificacionSMSFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificacionSMSPayload>
          }
          findMany: {
            args: Prisma.VerificacionSMSFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificacionSMSPayload>[]
          }
          create: {
            args: Prisma.VerificacionSMSCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificacionSMSPayload>
          }
          createMany: {
            args: Prisma.VerificacionSMSCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificacionSMSCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificacionSMSPayload>[]
          }
          delete: {
            args: Prisma.VerificacionSMSDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificacionSMSPayload>
          }
          update: {
            args: Prisma.VerificacionSMSUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificacionSMSPayload>
          }
          deleteMany: {
            args: Prisma.VerificacionSMSDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificacionSMSUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificacionSMSUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificacionSMSPayload>[]
          }
          upsert: {
            args: Prisma.VerificacionSMSUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificacionSMSPayload>
          }
          aggregate: {
            args: Prisma.VerificacionSMSAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificacionSMS>
          }
          groupBy: {
            args: Prisma.VerificacionSMSGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificacionSMSGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificacionSMSCountArgs<ExtArgs>
            result: $Utils.Optional<VerificacionSMSCountAggregateOutputType> | number
          }
        }
      }
      UsuarioClinica: {
        payload: Prisma.$UsuarioClinicaPayload<ExtArgs>
        fields: Prisma.UsuarioClinicaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioClinicaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioClinicaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioClinicaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioClinicaPayload>
          }
          findFirst: {
            args: Prisma.UsuarioClinicaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioClinicaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioClinicaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioClinicaPayload>
          }
          findMany: {
            args: Prisma.UsuarioClinicaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioClinicaPayload>[]
          }
          create: {
            args: Prisma.UsuarioClinicaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioClinicaPayload>
          }
          createMany: {
            args: Prisma.UsuarioClinicaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioClinicaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioClinicaPayload>[]
          }
          delete: {
            args: Prisma.UsuarioClinicaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioClinicaPayload>
          }
          update: {
            args: Prisma.UsuarioClinicaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioClinicaPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioClinicaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioClinicaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioClinicaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioClinicaPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioClinicaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioClinicaPayload>
          }
          aggregate: {
            args: Prisma.UsuarioClinicaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarioClinica>
          }
          groupBy: {
            args: Prisma.UsuarioClinicaGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioClinicaGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioClinicaCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioClinicaCountAggregateOutputType> | number
          }
        }
      }
      Acceso: {
        payload: Prisma.$AccesoPayload<ExtArgs>
        fields: Prisma.AccesoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccesoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccesoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccesoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccesoPayload>
          }
          findFirst: {
            args: Prisma.AccesoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccesoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccesoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccesoPayload>
          }
          findMany: {
            args: Prisma.AccesoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccesoPayload>[]
          }
          create: {
            args: Prisma.AccesoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccesoPayload>
          }
          createMany: {
            args: Prisma.AccesoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccesoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccesoPayload>[]
          }
          delete: {
            args: Prisma.AccesoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccesoPayload>
          }
          update: {
            args: Prisma.AccesoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccesoPayload>
          }
          deleteMany: {
            args: Prisma.AccesoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccesoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccesoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccesoPayload>[]
          }
          upsert: {
            args: Prisma.AccesoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccesoPayload>
          }
          aggregate: {
            args: Prisma.AccesoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAcceso>
          }
          groupBy: {
            args: Prisma.AccesoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccesoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccesoCountArgs<ExtArgs>
            result: $Utils.Optional<AccesoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    propietario?: PropietarioOmit
    clinica?: ClinicaOmit
    verificacionSMS?: VerificacionSMSOmit
    usuarioClinica?: UsuarioClinicaOmit
    acceso?: AccesoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    usuarioClinicas: number
    accesos: number
    verificacionesSMS: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarioClinicas?: boolean | UsuarioCountOutputTypeCountUsuarioClinicasArgs
    accesos?: boolean | UsuarioCountOutputTypeCountAccesosArgs
    verificacionesSMS?: boolean | UsuarioCountOutputTypeCountVerificacionesSMSArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountUsuarioClinicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioClinicaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountAccesosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccesoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountVerificacionesSMSArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificacionSMSWhereInput
  }


  /**
   * Count Type ClinicaCountOutputType
   */

  export type ClinicaCountOutputType = {
    usuarioClinicas: number
  }

  export type ClinicaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarioClinicas?: boolean | ClinicaCountOutputTypeCountUsuarioClinicasArgs
  }

  // Custom InputTypes
  /**
   * ClinicaCountOutputType without action
   */
  export type ClinicaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicaCountOutputType
     */
    select?: ClinicaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClinicaCountOutputType without action
   */
  export type ClinicaCountOutputTypeCountUsuarioClinicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioClinicaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
    propietarioId: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
    propietarioId: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    correo: string | null
    contraseña: string | null
    rol: $Enums.Rol | null
    creadoEn: Date | null
    ultimaConexion: Date | null
    activo: boolean | null
    verificadoEmail: boolean | null
    propietarioId: number | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    correo: string | null
    contraseña: string | null
    rol: $Enums.Rol | null
    creadoEn: Date | null
    ultimaConexion: Date | null
    activo: boolean | null
    verificadoEmail: boolean | null
    propietarioId: number | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    correo: number
    contraseña: number
    rol: number
    creadoEn: number
    ultimaConexion: number
    activo: number
    verificadoEmail: number
    propietarioId: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
    propietarioId?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
    propietarioId?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    correo?: true
    contraseña?: true
    rol?: true
    creadoEn?: true
    ultimaConexion?: true
    activo?: true
    verificadoEmail?: true
    propietarioId?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    correo?: true
    contraseña?: true
    rol?: true
    creadoEn?: true
    ultimaConexion?: true
    activo?: true
    verificadoEmail?: true
    propietarioId?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    correo?: true
    contraseña?: true
    rol?: true
    creadoEn?: true
    ultimaConexion?: true
    activo?: true
    verificadoEmail?: true
    propietarioId?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    correo: string
    contraseña: string
    rol: $Enums.Rol
    creadoEn: Date
    ultimaConexion: Date | null
    activo: boolean
    verificadoEmail: boolean
    propietarioId: number | null
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    correo?: boolean
    contraseña?: boolean
    rol?: boolean
    creadoEn?: boolean
    ultimaConexion?: boolean
    activo?: boolean
    verificadoEmail?: boolean
    propietarioId?: boolean
    propietario?: boolean | Usuario$propietarioArgs<ExtArgs>
    usuarioClinicas?: boolean | Usuario$usuarioClinicasArgs<ExtArgs>
    accesos?: boolean | Usuario$accesosArgs<ExtArgs>
    verificacionesSMS?: boolean | Usuario$verificacionesSMSArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    correo?: boolean
    contraseña?: boolean
    rol?: boolean
    creadoEn?: boolean
    ultimaConexion?: boolean
    activo?: boolean
    verificadoEmail?: boolean
    propietarioId?: boolean
    propietario?: boolean | Usuario$propietarioArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    correo?: boolean
    contraseña?: boolean
    rol?: boolean
    creadoEn?: boolean
    ultimaConexion?: boolean
    activo?: boolean
    verificadoEmail?: boolean
    propietarioId?: boolean
    propietario?: boolean | Usuario$propietarioArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    correo?: boolean
    contraseña?: boolean
    rol?: boolean
    creadoEn?: boolean
    ultimaConexion?: boolean
    activo?: boolean
    verificadoEmail?: boolean
    propietarioId?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "correo" | "contraseña" | "rol" | "creadoEn" | "ultimaConexion" | "activo" | "verificadoEmail" | "propietarioId", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    propietario?: boolean | Usuario$propietarioArgs<ExtArgs>
    usuarioClinicas?: boolean | Usuario$usuarioClinicasArgs<ExtArgs>
    accesos?: boolean | Usuario$accesosArgs<ExtArgs>
    verificacionesSMS?: boolean | Usuario$verificacionesSMSArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    propietario?: boolean | Usuario$propietarioArgs<ExtArgs>
  }
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    propietario?: boolean | Usuario$propietarioArgs<ExtArgs>
  }

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      propietario: Prisma.$PropietarioPayload<ExtArgs> | null
      usuarioClinicas: Prisma.$UsuarioClinicaPayload<ExtArgs>[]
      accesos: Prisma.$AccesoPayload<ExtArgs>[]
      verificacionesSMS: Prisma.$VerificacionSMSPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      correo: string
      contraseña: string
      rol: $Enums.Rol
      creadoEn: Date
      ultimaConexion: Date | null
      activo: boolean
      verificadoEmail: boolean
      propietarioId: number | null
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    propietario<T extends Usuario$propietarioArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$propietarioArgs<ExtArgs>>): Prisma__PropietarioClient<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    usuarioClinicas<T extends Usuario$usuarioClinicasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$usuarioClinicasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accesos<T extends Usuario$accesosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$accesosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    verificacionesSMS<T extends Usuario$verificacionesSMSArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$verificacionesSMSArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly correo: FieldRef<"Usuario", 'String'>
    readonly contraseña: FieldRef<"Usuario", 'String'>
    readonly rol: FieldRef<"Usuario", 'Rol'>
    readonly creadoEn: FieldRef<"Usuario", 'DateTime'>
    readonly ultimaConexion: FieldRef<"Usuario", 'DateTime'>
    readonly activo: FieldRef<"Usuario", 'Boolean'>
    readonly verificadoEmail: FieldRef<"Usuario", 'Boolean'>
    readonly propietarioId: FieldRef<"Usuario", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.propietario
   */
  export type Usuario$propietarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropietarioInclude<ExtArgs> | null
    where?: PropietarioWhereInput
  }

  /**
   * Usuario.usuarioClinicas
   */
  export type Usuario$usuarioClinicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
    where?: UsuarioClinicaWhereInput
    orderBy?: UsuarioClinicaOrderByWithRelationInput | UsuarioClinicaOrderByWithRelationInput[]
    cursor?: UsuarioClinicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioClinicaScalarFieldEnum | UsuarioClinicaScalarFieldEnum[]
  }

  /**
   * Usuario.accesos
   */
  export type Usuario$accesosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoInclude<ExtArgs> | null
    where?: AccesoWhereInput
    orderBy?: AccesoOrderByWithRelationInput | AccesoOrderByWithRelationInput[]
    cursor?: AccesoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccesoScalarFieldEnum | AccesoScalarFieldEnum[]
  }

  /**
   * Usuario.verificacionesSMS
   */
  export type Usuario$verificacionesSMSArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSInclude<ExtArgs> | null
    where?: VerificacionSMSWhereInput
    orderBy?: VerificacionSMSOrderByWithRelationInput | VerificacionSMSOrderByWithRelationInput[]
    cursor?: VerificacionSMSWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VerificacionSMSScalarFieldEnum | VerificacionSMSScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Propietario
   */

  export type AggregatePropietario = {
    _count: PropietarioCountAggregateOutputType | null
    _avg: PropietarioAvgAggregateOutputType | null
    _sum: PropietarioSumAggregateOutputType | null
    _min: PropietarioMinAggregateOutputType | null
    _max: PropietarioMaxAggregateOutputType | null
  }

  export type PropietarioAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type PropietarioSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type PropietarioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    creadoEn: Date | null
    telefonoPrincipal: string | null
    telefonoSecundario1: string | null
    telefonoSecundario2: string | null
    usuarioId: number | null
  }

  export type PropietarioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    creadoEn: Date | null
    telefonoPrincipal: string | null
    telefonoSecundario1: string | null
    telefonoSecundario2: string | null
    usuarioId: number | null
  }

  export type PropietarioCountAggregateOutputType = {
    id: number
    nombre: number
    creadoEn: number
    telefonoPrincipal: number
    telefonoSecundario1: number
    telefonoSecundario2: number
    usuarioId: number
    _all: number
  }


  export type PropietarioAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type PropietarioSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type PropietarioMinAggregateInputType = {
    id?: true
    nombre?: true
    creadoEn?: true
    telefonoPrincipal?: true
    telefonoSecundario1?: true
    telefonoSecundario2?: true
    usuarioId?: true
  }

  export type PropietarioMaxAggregateInputType = {
    id?: true
    nombre?: true
    creadoEn?: true
    telefonoPrincipal?: true
    telefonoSecundario1?: true
    telefonoSecundario2?: true
    usuarioId?: true
  }

  export type PropietarioCountAggregateInputType = {
    id?: true
    nombre?: true
    creadoEn?: true
    telefonoPrincipal?: true
    telefonoSecundario1?: true
    telefonoSecundario2?: true
    usuarioId?: true
    _all?: true
  }

  export type PropietarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Propietario to aggregate.
     */
    where?: PropietarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Propietarios to fetch.
     */
    orderBy?: PropietarioOrderByWithRelationInput | PropietarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropietarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Propietarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Propietarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Propietarios
    **/
    _count?: true | PropietarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropietarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropietarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropietarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropietarioMaxAggregateInputType
  }

  export type GetPropietarioAggregateType<T extends PropietarioAggregateArgs> = {
        [P in keyof T & keyof AggregatePropietario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePropietario[P]>
      : GetScalarType<T[P], AggregatePropietario[P]>
  }




  export type PropietarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropietarioWhereInput
    orderBy?: PropietarioOrderByWithAggregationInput | PropietarioOrderByWithAggregationInput[]
    by: PropietarioScalarFieldEnum[] | PropietarioScalarFieldEnum
    having?: PropietarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropietarioCountAggregateInputType | true
    _avg?: PropietarioAvgAggregateInputType
    _sum?: PropietarioSumAggregateInputType
    _min?: PropietarioMinAggregateInputType
    _max?: PropietarioMaxAggregateInputType
  }

  export type PropietarioGroupByOutputType = {
    id: number
    nombre: string
    creadoEn: Date
    telefonoPrincipal: string
    telefonoSecundario1: string | null
    telefonoSecundario2: string | null
    usuarioId: number | null
    _count: PropietarioCountAggregateOutputType | null
    _avg: PropietarioAvgAggregateOutputType | null
    _sum: PropietarioSumAggregateOutputType | null
    _min: PropietarioMinAggregateOutputType | null
    _max: PropietarioMaxAggregateOutputType | null
  }

  type GetPropietarioGroupByPayload<T extends PropietarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropietarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropietarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropietarioGroupByOutputType[P]>
            : GetScalarType<T[P], PropietarioGroupByOutputType[P]>
        }
      >
    >


  export type PropietarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    creadoEn?: boolean
    telefonoPrincipal?: boolean
    telefonoSecundario1?: boolean
    telefonoSecundario2?: boolean
    usuarioId?: boolean
    usuario?: boolean | Propietario$usuarioArgs<ExtArgs>
  }, ExtArgs["result"]["propietario"]>

  export type PropietarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    creadoEn?: boolean
    telefonoPrincipal?: boolean
    telefonoSecundario1?: boolean
    telefonoSecundario2?: boolean
    usuarioId?: boolean
  }, ExtArgs["result"]["propietario"]>

  export type PropietarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    creadoEn?: boolean
    telefonoPrincipal?: boolean
    telefonoSecundario1?: boolean
    telefonoSecundario2?: boolean
    usuarioId?: boolean
  }, ExtArgs["result"]["propietario"]>

  export type PropietarioSelectScalar = {
    id?: boolean
    nombre?: boolean
    creadoEn?: boolean
    telefonoPrincipal?: boolean
    telefonoSecundario1?: boolean
    telefonoSecundario2?: boolean
    usuarioId?: boolean
  }

  export type PropietarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "creadoEn" | "telefonoPrincipal" | "telefonoSecundario1" | "telefonoSecundario2" | "usuarioId", ExtArgs["result"]["propietario"]>
  export type PropietarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Propietario$usuarioArgs<ExtArgs>
  }
  export type PropietarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PropietarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PropietarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Propietario"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      creadoEn: Date
      telefonoPrincipal: string
      telefonoSecundario1: string | null
      telefonoSecundario2: string | null
      usuarioId: number | null
    }, ExtArgs["result"]["propietario"]>
    composites: {}
  }

  type PropietarioGetPayload<S extends boolean | null | undefined | PropietarioDefaultArgs> = $Result.GetResult<Prisma.$PropietarioPayload, S>

  type PropietarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PropietarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PropietarioCountAggregateInputType | true
    }

  export interface PropietarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Propietario'], meta: { name: 'Propietario' } }
    /**
     * Find zero or one Propietario that matches the filter.
     * @param {PropietarioFindUniqueArgs} args - Arguments to find a Propietario
     * @example
     * // Get one Propietario
     * const propietario = await prisma.propietario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PropietarioFindUniqueArgs>(args: SelectSubset<T, PropietarioFindUniqueArgs<ExtArgs>>): Prisma__PropietarioClient<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Propietario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PropietarioFindUniqueOrThrowArgs} args - Arguments to find a Propietario
     * @example
     * // Get one Propietario
     * const propietario = await prisma.propietario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PropietarioFindUniqueOrThrowArgs>(args: SelectSubset<T, PropietarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PropietarioClient<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Propietario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropietarioFindFirstArgs} args - Arguments to find a Propietario
     * @example
     * // Get one Propietario
     * const propietario = await prisma.propietario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PropietarioFindFirstArgs>(args?: SelectSubset<T, PropietarioFindFirstArgs<ExtArgs>>): Prisma__PropietarioClient<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Propietario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropietarioFindFirstOrThrowArgs} args - Arguments to find a Propietario
     * @example
     * // Get one Propietario
     * const propietario = await prisma.propietario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PropietarioFindFirstOrThrowArgs>(args?: SelectSubset<T, PropietarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__PropietarioClient<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Propietarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropietarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Propietarios
     * const propietarios = await prisma.propietario.findMany()
     * 
     * // Get first 10 Propietarios
     * const propietarios = await prisma.propietario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propietarioWithIdOnly = await prisma.propietario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PropietarioFindManyArgs>(args?: SelectSubset<T, PropietarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Propietario.
     * @param {PropietarioCreateArgs} args - Arguments to create a Propietario.
     * @example
     * // Create one Propietario
     * const Propietario = await prisma.propietario.create({
     *   data: {
     *     // ... data to create a Propietario
     *   }
     * })
     * 
     */
    create<T extends PropietarioCreateArgs>(args: SelectSubset<T, PropietarioCreateArgs<ExtArgs>>): Prisma__PropietarioClient<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Propietarios.
     * @param {PropietarioCreateManyArgs} args - Arguments to create many Propietarios.
     * @example
     * // Create many Propietarios
     * const propietario = await prisma.propietario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PropietarioCreateManyArgs>(args?: SelectSubset<T, PropietarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Propietarios and returns the data saved in the database.
     * @param {PropietarioCreateManyAndReturnArgs} args - Arguments to create many Propietarios.
     * @example
     * // Create many Propietarios
     * const propietario = await prisma.propietario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Propietarios and only return the `id`
     * const propietarioWithIdOnly = await prisma.propietario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PropietarioCreateManyAndReturnArgs>(args?: SelectSubset<T, PropietarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Propietario.
     * @param {PropietarioDeleteArgs} args - Arguments to delete one Propietario.
     * @example
     * // Delete one Propietario
     * const Propietario = await prisma.propietario.delete({
     *   where: {
     *     // ... filter to delete one Propietario
     *   }
     * })
     * 
     */
    delete<T extends PropietarioDeleteArgs>(args: SelectSubset<T, PropietarioDeleteArgs<ExtArgs>>): Prisma__PropietarioClient<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Propietario.
     * @param {PropietarioUpdateArgs} args - Arguments to update one Propietario.
     * @example
     * // Update one Propietario
     * const propietario = await prisma.propietario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PropietarioUpdateArgs>(args: SelectSubset<T, PropietarioUpdateArgs<ExtArgs>>): Prisma__PropietarioClient<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Propietarios.
     * @param {PropietarioDeleteManyArgs} args - Arguments to filter Propietarios to delete.
     * @example
     * // Delete a few Propietarios
     * const { count } = await prisma.propietario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PropietarioDeleteManyArgs>(args?: SelectSubset<T, PropietarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Propietarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropietarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Propietarios
     * const propietario = await prisma.propietario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PropietarioUpdateManyArgs>(args: SelectSubset<T, PropietarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Propietarios and returns the data updated in the database.
     * @param {PropietarioUpdateManyAndReturnArgs} args - Arguments to update many Propietarios.
     * @example
     * // Update many Propietarios
     * const propietario = await prisma.propietario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Propietarios and only return the `id`
     * const propietarioWithIdOnly = await prisma.propietario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PropietarioUpdateManyAndReturnArgs>(args: SelectSubset<T, PropietarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Propietario.
     * @param {PropietarioUpsertArgs} args - Arguments to update or create a Propietario.
     * @example
     * // Update or create a Propietario
     * const propietario = await prisma.propietario.upsert({
     *   create: {
     *     // ... data to create a Propietario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Propietario we want to update
     *   }
     * })
     */
    upsert<T extends PropietarioUpsertArgs>(args: SelectSubset<T, PropietarioUpsertArgs<ExtArgs>>): Prisma__PropietarioClient<$Result.GetResult<Prisma.$PropietarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Propietarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropietarioCountArgs} args - Arguments to filter Propietarios to count.
     * @example
     * // Count the number of Propietarios
     * const count = await prisma.propietario.count({
     *   where: {
     *     // ... the filter for the Propietarios we want to count
     *   }
     * })
    **/
    count<T extends PropietarioCountArgs>(
      args?: Subset<T, PropietarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropietarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Propietario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropietarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropietarioAggregateArgs>(args: Subset<T, PropietarioAggregateArgs>): Prisma.PrismaPromise<GetPropietarioAggregateType<T>>

    /**
     * Group by Propietario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropietarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropietarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropietarioGroupByArgs['orderBy'] }
        : { orderBy?: PropietarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropietarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropietarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Propietario model
   */
  readonly fields: PropietarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Propietario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PropietarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends Propietario$usuarioArgs<ExtArgs> = {}>(args?: Subset<T, Propietario$usuarioArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Propietario model
   */
  interface PropietarioFieldRefs {
    readonly id: FieldRef<"Propietario", 'Int'>
    readonly nombre: FieldRef<"Propietario", 'String'>
    readonly creadoEn: FieldRef<"Propietario", 'DateTime'>
    readonly telefonoPrincipal: FieldRef<"Propietario", 'String'>
    readonly telefonoSecundario1: FieldRef<"Propietario", 'String'>
    readonly telefonoSecundario2: FieldRef<"Propietario", 'String'>
    readonly usuarioId: FieldRef<"Propietario", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Propietario findUnique
   */
  export type PropietarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropietarioInclude<ExtArgs> | null
    /**
     * Filter, which Propietario to fetch.
     */
    where: PropietarioWhereUniqueInput
  }

  /**
   * Propietario findUniqueOrThrow
   */
  export type PropietarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropietarioInclude<ExtArgs> | null
    /**
     * Filter, which Propietario to fetch.
     */
    where: PropietarioWhereUniqueInput
  }

  /**
   * Propietario findFirst
   */
  export type PropietarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropietarioInclude<ExtArgs> | null
    /**
     * Filter, which Propietario to fetch.
     */
    where?: PropietarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Propietarios to fetch.
     */
    orderBy?: PropietarioOrderByWithRelationInput | PropietarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Propietarios.
     */
    cursor?: PropietarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Propietarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Propietarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Propietarios.
     */
    distinct?: PropietarioScalarFieldEnum | PropietarioScalarFieldEnum[]
  }

  /**
   * Propietario findFirstOrThrow
   */
  export type PropietarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropietarioInclude<ExtArgs> | null
    /**
     * Filter, which Propietario to fetch.
     */
    where?: PropietarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Propietarios to fetch.
     */
    orderBy?: PropietarioOrderByWithRelationInput | PropietarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Propietarios.
     */
    cursor?: PropietarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Propietarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Propietarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Propietarios.
     */
    distinct?: PropietarioScalarFieldEnum | PropietarioScalarFieldEnum[]
  }

  /**
   * Propietario findMany
   */
  export type PropietarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropietarioInclude<ExtArgs> | null
    /**
     * Filter, which Propietarios to fetch.
     */
    where?: PropietarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Propietarios to fetch.
     */
    orderBy?: PropietarioOrderByWithRelationInput | PropietarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Propietarios.
     */
    cursor?: PropietarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Propietarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Propietarios.
     */
    skip?: number
    distinct?: PropietarioScalarFieldEnum | PropietarioScalarFieldEnum[]
  }

  /**
   * Propietario create
   */
  export type PropietarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropietarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Propietario.
     */
    data: XOR<PropietarioCreateInput, PropietarioUncheckedCreateInput>
  }

  /**
   * Propietario createMany
   */
  export type PropietarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Propietarios.
     */
    data: PropietarioCreateManyInput | PropietarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Propietario createManyAndReturn
   */
  export type PropietarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * The data used to create many Propietarios.
     */
    data: PropietarioCreateManyInput | PropietarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Propietario update
   */
  export type PropietarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropietarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Propietario.
     */
    data: XOR<PropietarioUpdateInput, PropietarioUncheckedUpdateInput>
    /**
     * Choose, which Propietario to update.
     */
    where: PropietarioWhereUniqueInput
  }

  /**
   * Propietario updateMany
   */
  export type PropietarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Propietarios.
     */
    data: XOR<PropietarioUpdateManyMutationInput, PropietarioUncheckedUpdateManyInput>
    /**
     * Filter which Propietarios to update
     */
    where?: PropietarioWhereInput
    /**
     * Limit how many Propietarios to update.
     */
    limit?: number
  }

  /**
   * Propietario updateManyAndReturn
   */
  export type PropietarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * The data used to update Propietarios.
     */
    data: XOR<PropietarioUpdateManyMutationInput, PropietarioUncheckedUpdateManyInput>
    /**
     * Filter which Propietarios to update
     */
    where?: PropietarioWhereInput
    /**
     * Limit how many Propietarios to update.
     */
    limit?: number
  }

  /**
   * Propietario upsert
   */
  export type PropietarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropietarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Propietario to update in case it exists.
     */
    where: PropietarioWhereUniqueInput
    /**
     * In case the Propietario found by the `where` argument doesn't exist, create a new Propietario with this data.
     */
    create: XOR<PropietarioCreateInput, PropietarioUncheckedCreateInput>
    /**
     * In case the Propietario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropietarioUpdateInput, PropietarioUncheckedUpdateInput>
  }

  /**
   * Propietario delete
   */
  export type PropietarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropietarioInclude<ExtArgs> | null
    /**
     * Filter which Propietario to delete.
     */
    where: PropietarioWhereUniqueInput
  }

  /**
   * Propietario deleteMany
   */
  export type PropietarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Propietarios to delete
     */
    where?: PropietarioWhereInput
    /**
     * Limit how many Propietarios to delete.
     */
    limit?: number
  }

  /**
   * Propietario.usuario
   */
  export type Propietario$usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
  }

  /**
   * Propietario without action
   */
  export type PropietarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Propietario
     */
    select?: PropietarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Propietario
     */
    omit?: PropietarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropietarioInclude<ExtArgs> | null
  }


  /**
   * Model Clinica
   */

  export type AggregateClinica = {
    _count: ClinicaCountAggregateOutputType | null
    _avg: ClinicaAvgAggregateOutputType | null
    _sum: ClinicaSumAggregateOutputType | null
    _min: ClinicaMinAggregateOutputType | null
    _max: ClinicaMaxAggregateOutputType | null
  }

  export type ClinicaAvgAggregateOutputType = {
    id: number | null
  }

  export type ClinicaSumAggregateOutputType = {
    id: number | null
  }

  export type ClinicaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    direccion: string | null
    telefono: string | null
    tipo: string | null
    creadoEn: Date | null
  }

  export type ClinicaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    direccion: string | null
    telefono: string | null
    tipo: string | null
    creadoEn: Date | null
  }

  export type ClinicaCountAggregateOutputType = {
    id: number
    nombre: number
    direccion: number
    telefono: number
    tipo: number
    creadoEn: number
    _all: number
  }


  export type ClinicaAvgAggregateInputType = {
    id?: true
  }

  export type ClinicaSumAggregateInputType = {
    id?: true
  }

  export type ClinicaMinAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    tipo?: true
    creadoEn?: true
  }

  export type ClinicaMaxAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    tipo?: true
    creadoEn?: true
  }

  export type ClinicaCountAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    tipo?: true
    creadoEn?: true
    _all?: true
  }

  export type ClinicaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clinica to aggregate.
     */
    where?: ClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinicas to fetch.
     */
    orderBy?: ClinicaOrderByWithRelationInput | ClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clinicas
    **/
    _count?: true | ClinicaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClinicaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClinicaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClinicaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClinicaMaxAggregateInputType
  }

  export type GetClinicaAggregateType<T extends ClinicaAggregateArgs> = {
        [P in keyof T & keyof AggregateClinica]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClinica[P]>
      : GetScalarType<T[P], AggregateClinica[P]>
  }




  export type ClinicaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicaWhereInput
    orderBy?: ClinicaOrderByWithAggregationInput | ClinicaOrderByWithAggregationInput[]
    by: ClinicaScalarFieldEnum[] | ClinicaScalarFieldEnum
    having?: ClinicaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClinicaCountAggregateInputType | true
    _avg?: ClinicaAvgAggregateInputType
    _sum?: ClinicaSumAggregateInputType
    _min?: ClinicaMinAggregateInputType
    _max?: ClinicaMaxAggregateInputType
  }

  export type ClinicaGroupByOutputType = {
    id: number
    nombre: string
    direccion: string
    telefono: string
    tipo: string
    creadoEn: Date
    _count: ClinicaCountAggregateOutputType | null
    _avg: ClinicaAvgAggregateOutputType | null
    _sum: ClinicaSumAggregateOutputType | null
    _min: ClinicaMinAggregateOutputType | null
    _max: ClinicaMaxAggregateOutputType | null
  }

  type GetClinicaGroupByPayload<T extends ClinicaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClinicaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClinicaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClinicaGroupByOutputType[P]>
            : GetScalarType<T[P], ClinicaGroupByOutputType[P]>
        }
      >
    >


  export type ClinicaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    tipo?: boolean
    creadoEn?: boolean
    usuarioClinicas?: boolean | Clinica$usuarioClinicasArgs<ExtArgs>
    _count?: boolean | ClinicaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clinica"]>

  export type ClinicaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    tipo?: boolean
    creadoEn?: boolean
  }, ExtArgs["result"]["clinica"]>

  export type ClinicaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    tipo?: boolean
    creadoEn?: boolean
  }, ExtArgs["result"]["clinica"]>

  export type ClinicaSelectScalar = {
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    tipo?: boolean
    creadoEn?: boolean
  }

  export type ClinicaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "direccion" | "telefono" | "tipo" | "creadoEn", ExtArgs["result"]["clinica"]>
  export type ClinicaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarioClinicas?: boolean | Clinica$usuarioClinicasArgs<ExtArgs>
    _count?: boolean | ClinicaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClinicaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClinicaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClinicaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Clinica"
    objects: {
      usuarioClinicas: Prisma.$UsuarioClinicaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      direccion: string
      telefono: string
      tipo: string
      creadoEn: Date
    }, ExtArgs["result"]["clinica"]>
    composites: {}
  }

  type ClinicaGetPayload<S extends boolean | null | undefined | ClinicaDefaultArgs> = $Result.GetResult<Prisma.$ClinicaPayload, S>

  type ClinicaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClinicaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClinicaCountAggregateInputType | true
    }

  export interface ClinicaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Clinica'], meta: { name: 'Clinica' } }
    /**
     * Find zero or one Clinica that matches the filter.
     * @param {ClinicaFindUniqueArgs} args - Arguments to find a Clinica
     * @example
     * // Get one Clinica
     * const clinica = await prisma.clinica.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClinicaFindUniqueArgs>(args: SelectSubset<T, ClinicaFindUniqueArgs<ExtArgs>>): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Clinica that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClinicaFindUniqueOrThrowArgs} args - Arguments to find a Clinica
     * @example
     * // Get one Clinica
     * const clinica = await prisma.clinica.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClinicaFindUniqueOrThrowArgs>(args: SelectSubset<T, ClinicaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clinica that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaFindFirstArgs} args - Arguments to find a Clinica
     * @example
     * // Get one Clinica
     * const clinica = await prisma.clinica.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClinicaFindFirstArgs>(args?: SelectSubset<T, ClinicaFindFirstArgs<ExtArgs>>): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clinica that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaFindFirstOrThrowArgs} args - Arguments to find a Clinica
     * @example
     * // Get one Clinica
     * const clinica = await prisma.clinica.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClinicaFindFirstOrThrowArgs>(args?: SelectSubset<T, ClinicaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clinicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clinicas
     * const clinicas = await prisma.clinica.findMany()
     * 
     * // Get first 10 Clinicas
     * const clinicas = await prisma.clinica.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clinicaWithIdOnly = await prisma.clinica.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClinicaFindManyArgs>(args?: SelectSubset<T, ClinicaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Clinica.
     * @param {ClinicaCreateArgs} args - Arguments to create a Clinica.
     * @example
     * // Create one Clinica
     * const Clinica = await prisma.clinica.create({
     *   data: {
     *     // ... data to create a Clinica
     *   }
     * })
     * 
     */
    create<T extends ClinicaCreateArgs>(args: SelectSubset<T, ClinicaCreateArgs<ExtArgs>>): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clinicas.
     * @param {ClinicaCreateManyArgs} args - Arguments to create many Clinicas.
     * @example
     * // Create many Clinicas
     * const clinica = await prisma.clinica.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClinicaCreateManyArgs>(args?: SelectSubset<T, ClinicaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clinicas and returns the data saved in the database.
     * @param {ClinicaCreateManyAndReturnArgs} args - Arguments to create many Clinicas.
     * @example
     * // Create many Clinicas
     * const clinica = await prisma.clinica.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clinicas and only return the `id`
     * const clinicaWithIdOnly = await prisma.clinica.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClinicaCreateManyAndReturnArgs>(args?: SelectSubset<T, ClinicaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Clinica.
     * @param {ClinicaDeleteArgs} args - Arguments to delete one Clinica.
     * @example
     * // Delete one Clinica
     * const Clinica = await prisma.clinica.delete({
     *   where: {
     *     // ... filter to delete one Clinica
     *   }
     * })
     * 
     */
    delete<T extends ClinicaDeleteArgs>(args: SelectSubset<T, ClinicaDeleteArgs<ExtArgs>>): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Clinica.
     * @param {ClinicaUpdateArgs} args - Arguments to update one Clinica.
     * @example
     * // Update one Clinica
     * const clinica = await prisma.clinica.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClinicaUpdateArgs>(args: SelectSubset<T, ClinicaUpdateArgs<ExtArgs>>): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clinicas.
     * @param {ClinicaDeleteManyArgs} args - Arguments to filter Clinicas to delete.
     * @example
     * // Delete a few Clinicas
     * const { count } = await prisma.clinica.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClinicaDeleteManyArgs>(args?: SelectSubset<T, ClinicaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clinicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clinicas
     * const clinica = await prisma.clinica.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClinicaUpdateManyArgs>(args: SelectSubset<T, ClinicaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clinicas and returns the data updated in the database.
     * @param {ClinicaUpdateManyAndReturnArgs} args - Arguments to update many Clinicas.
     * @example
     * // Update many Clinicas
     * const clinica = await prisma.clinica.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clinicas and only return the `id`
     * const clinicaWithIdOnly = await prisma.clinica.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClinicaUpdateManyAndReturnArgs>(args: SelectSubset<T, ClinicaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Clinica.
     * @param {ClinicaUpsertArgs} args - Arguments to update or create a Clinica.
     * @example
     * // Update or create a Clinica
     * const clinica = await prisma.clinica.upsert({
     *   create: {
     *     // ... data to create a Clinica
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clinica we want to update
     *   }
     * })
     */
    upsert<T extends ClinicaUpsertArgs>(args: SelectSubset<T, ClinicaUpsertArgs<ExtArgs>>): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clinicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaCountArgs} args - Arguments to filter Clinicas to count.
     * @example
     * // Count the number of Clinicas
     * const count = await prisma.clinica.count({
     *   where: {
     *     // ... the filter for the Clinicas we want to count
     *   }
     * })
    **/
    count<T extends ClinicaCountArgs>(
      args?: Subset<T, ClinicaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClinicaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clinica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClinicaAggregateArgs>(args: Subset<T, ClinicaAggregateArgs>): Prisma.PrismaPromise<GetClinicaAggregateType<T>>

    /**
     * Group by Clinica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClinicaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClinicaGroupByArgs['orderBy'] }
        : { orderBy?: ClinicaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClinicaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClinicaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Clinica model
   */
  readonly fields: ClinicaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Clinica.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClinicaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuarioClinicas<T extends Clinica$usuarioClinicasArgs<ExtArgs> = {}>(args?: Subset<T, Clinica$usuarioClinicasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Clinica model
   */
  interface ClinicaFieldRefs {
    readonly id: FieldRef<"Clinica", 'Int'>
    readonly nombre: FieldRef<"Clinica", 'String'>
    readonly direccion: FieldRef<"Clinica", 'String'>
    readonly telefono: FieldRef<"Clinica", 'String'>
    readonly tipo: FieldRef<"Clinica", 'String'>
    readonly creadoEn: FieldRef<"Clinica", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Clinica findUnique
   */
  export type ClinicaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicaInclude<ExtArgs> | null
    /**
     * Filter, which Clinica to fetch.
     */
    where: ClinicaWhereUniqueInput
  }

  /**
   * Clinica findUniqueOrThrow
   */
  export type ClinicaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicaInclude<ExtArgs> | null
    /**
     * Filter, which Clinica to fetch.
     */
    where: ClinicaWhereUniqueInput
  }

  /**
   * Clinica findFirst
   */
  export type ClinicaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicaInclude<ExtArgs> | null
    /**
     * Filter, which Clinica to fetch.
     */
    where?: ClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinicas to fetch.
     */
    orderBy?: ClinicaOrderByWithRelationInput | ClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clinicas.
     */
    cursor?: ClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clinicas.
     */
    distinct?: ClinicaScalarFieldEnum | ClinicaScalarFieldEnum[]
  }

  /**
   * Clinica findFirstOrThrow
   */
  export type ClinicaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicaInclude<ExtArgs> | null
    /**
     * Filter, which Clinica to fetch.
     */
    where?: ClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinicas to fetch.
     */
    orderBy?: ClinicaOrderByWithRelationInput | ClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clinicas.
     */
    cursor?: ClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clinicas.
     */
    distinct?: ClinicaScalarFieldEnum | ClinicaScalarFieldEnum[]
  }

  /**
   * Clinica findMany
   */
  export type ClinicaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicaInclude<ExtArgs> | null
    /**
     * Filter, which Clinicas to fetch.
     */
    where?: ClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clinicas to fetch.
     */
    orderBy?: ClinicaOrderByWithRelationInput | ClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clinicas.
     */
    cursor?: ClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clinicas.
     */
    skip?: number
    distinct?: ClinicaScalarFieldEnum | ClinicaScalarFieldEnum[]
  }

  /**
   * Clinica create
   */
  export type ClinicaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicaInclude<ExtArgs> | null
    /**
     * The data needed to create a Clinica.
     */
    data: XOR<ClinicaCreateInput, ClinicaUncheckedCreateInput>
  }

  /**
   * Clinica createMany
   */
  export type ClinicaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clinicas.
     */
    data: ClinicaCreateManyInput | ClinicaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clinica createManyAndReturn
   */
  export type ClinicaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * The data used to create many Clinicas.
     */
    data: ClinicaCreateManyInput | ClinicaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Clinica update
   */
  export type ClinicaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicaInclude<ExtArgs> | null
    /**
     * The data needed to update a Clinica.
     */
    data: XOR<ClinicaUpdateInput, ClinicaUncheckedUpdateInput>
    /**
     * Choose, which Clinica to update.
     */
    where: ClinicaWhereUniqueInput
  }

  /**
   * Clinica updateMany
   */
  export type ClinicaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clinicas.
     */
    data: XOR<ClinicaUpdateManyMutationInput, ClinicaUncheckedUpdateManyInput>
    /**
     * Filter which Clinicas to update
     */
    where?: ClinicaWhereInput
    /**
     * Limit how many Clinicas to update.
     */
    limit?: number
  }

  /**
   * Clinica updateManyAndReturn
   */
  export type ClinicaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * The data used to update Clinicas.
     */
    data: XOR<ClinicaUpdateManyMutationInput, ClinicaUncheckedUpdateManyInput>
    /**
     * Filter which Clinicas to update
     */
    where?: ClinicaWhereInput
    /**
     * Limit how many Clinicas to update.
     */
    limit?: number
  }

  /**
   * Clinica upsert
   */
  export type ClinicaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicaInclude<ExtArgs> | null
    /**
     * The filter to search for the Clinica to update in case it exists.
     */
    where: ClinicaWhereUniqueInput
    /**
     * In case the Clinica found by the `where` argument doesn't exist, create a new Clinica with this data.
     */
    create: XOR<ClinicaCreateInput, ClinicaUncheckedCreateInput>
    /**
     * In case the Clinica was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClinicaUpdateInput, ClinicaUncheckedUpdateInput>
  }

  /**
   * Clinica delete
   */
  export type ClinicaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicaInclude<ExtArgs> | null
    /**
     * Filter which Clinica to delete.
     */
    where: ClinicaWhereUniqueInput
  }

  /**
   * Clinica deleteMany
   */
  export type ClinicaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clinicas to delete
     */
    where?: ClinicaWhereInput
    /**
     * Limit how many Clinicas to delete.
     */
    limit?: number
  }

  /**
   * Clinica.usuarioClinicas
   */
  export type Clinica$usuarioClinicasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
    where?: UsuarioClinicaWhereInput
    orderBy?: UsuarioClinicaOrderByWithRelationInput | UsuarioClinicaOrderByWithRelationInput[]
    cursor?: UsuarioClinicaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioClinicaScalarFieldEnum | UsuarioClinicaScalarFieldEnum[]
  }

  /**
   * Clinica without action
   */
  export type ClinicaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clinica
     */
    select?: ClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clinica
     */
    omit?: ClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicaInclude<ExtArgs> | null
  }


  /**
   * Model VerificacionSMS
   */

  export type AggregateVerificacionSMS = {
    _count: VerificacionSMSCountAggregateOutputType | null
    _avg: VerificacionSMSAvgAggregateOutputType | null
    _sum: VerificacionSMSSumAggregateOutputType | null
    _min: VerificacionSMSMinAggregateOutputType | null
    _max: VerificacionSMSMaxAggregateOutputType | null
  }

  export type VerificacionSMSAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    intentosFallidos: number | null
  }

  export type VerificacionSMSSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    intentosFallidos: number | null
  }

  export type VerificacionSMSMinAggregateOutputType = {
    id: number | null
    telefono: string | null
    codigo: string | null
    usado: boolean | null
    creadoEn: Date | null
    expiradoEn: Date | null
    usuarioId: number | null
    intentosFallidos: number | null
  }

  export type VerificacionSMSMaxAggregateOutputType = {
    id: number | null
    telefono: string | null
    codigo: string | null
    usado: boolean | null
    creadoEn: Date | null
    expiradoEn: Date | null
    usuarioId: number | null
    intentosFallidos: number | null
  }

  export type VerificacionSMSCountAggregateOutputType = {
    id: number
    telefono: number
    codigo: number
    usado: number
    creadoEn: number
    expiradoEn: number
    usuarioId: number
    intentosFallidos: number
    _all: number
  }


  export type VerificacionSMSAvgAggregateInputType = {
    id?: true
    usuarioId?: true
    intentosFallidos?: true
  }

  export type VerificacionSMSSumAggregateInputType = {
    id?: true
    usuarioId?: true
    intentosFallidos?: true
  }

  export type VerificacionSMSMinAggregateInputType = {
    id?: true
    telefono?: true
    codigo?: true
    usado?: true
    creadoEn?: true
    expiradoEn?: true
    usuarioId?: true
    intentosFallidos?: true
  }

  export type VerificacionSMSMaxAggregateInputType = {
    id?: true
    telefono?: true
    codigo?: true
    usado?: true
    creadoEn?: true
    expiradoEn?: true
    usuarioId?: true
    intentosFallidos?: true
  }

  export type VerificacionSMSCountAggregateInputType = {
    id?: true
    telefono?: true
    codigo?: true
    usado?: true
    creadoEn?: true
    expiradoEn?: true
    usuarioId?: true
    intentosFallidos?: true
    _all?: true
  }

  export type VerificacionSMSAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificacionSMS to aggregate.
     */
    where?: VerificacionSMSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificacionSMS to fetch.
     */
    orderBy?: VerificacionSMSOrderByWithRelationInput | VerificacionSMSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificacionSMSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificacionSMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificacionSMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificacionSMS
    **/
    _count?: true | VerificacionSMSCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VerificacionSMSAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VerificacionSMSSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificacionSMSMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificacionSMSMaxAggregateInputType
  }

  export type GetVerificacionSMSAggregateType<T extends VerificacionSMSAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificacionSMS]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificacionSMS[P]>
      : GetScalarType<T[P], AggregateVerificacionSMS[P]>
  }




  export type VerificacionSMSGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificacionSMSWhereInput
    orderBy?: VerificacionSMSOrderByWithAggregationInput | VerificacionSMSOrderByWithAggregationInput[]
    by: VerificacionSMSScalarFieldEnum[] | VerificacionSMSScalarFieldEnum
    having?: VerificacionSMSScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificacionSMSCountAggregateInputType | true
    _avg?: VerificacionSMSAvgAggregateInputType
    _sum?: VerificacionSMSSumAggregateInputType
    _min?: VerificacionSMSMinAggregateInputType
    _max?: VerificacionSMSMaxAggregateInputType
  }

  export type VerificacionSMSGroupByOutputType = {
    id: number
    telefono: string
    codigo: string
    usado: boolean
    creadoEn: Date
    expiradoEn: Date
    usuarioId: number
    intentosFallidos: number
    _count: VerificacionSMSCountAggregateOutputType | null
    _avg: VerificacionSMSAvgAggregateOutputType | null
    _sum: VerificacionSMSSumAggregateOutputType | null
    _min: VerificacionSMSMinAggregateOutputType | null
    _max: VerificacionSMSMaxAggregateOutputType | null
  }

  type GetVerificacionSMSGroupByPayload<T extends VerificacionSMSGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificacionSMSGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificacionSMSGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificacionSMSGroupByOutputType[P]>
            : GetScalarType<T[P], VerificacionSMSGroupByOutputType[P]>
        }
      >
    >


  export type VerificacionSMSSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telefono?: boolean
    codigo?: boolean
    usado?: boolean
    creadoEn?: boolean
    expiradoEn?: boolean
    usuarioId?: boolean
    intentosFallidos?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verificacionSMS"]>

  export type VerificacionSMSSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telefono?: boolean
    codigo?: boolean
    usado?: boolean
    creadoEn?: boolean
    expiradoEn?: boolean
    usuarioId?: boolean
    intentosFallidos?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verificacionSMS"]>

  export type VerificacionSMSSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telefono?: boolean
    codigo?: boolean
    usado?: boolean
    creadoEn?: boolean
    expiradoEn?: boolean
    usuarioId?: boolean
    intentosFallidos?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verificacionSMS"]>

  export type VerificacionSMSSelectScalar = {
    id?: boolean
    telefono?: boolean
    codigo?: boolean
    usado?: boolean
    creadoEn?: boolean
    expiradoEn?: boolean
    usuarioId?: boolean
    intentosFallidos?: boolean
  }

  export type VerificacionSMSOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "telefono" | "codigo" | "usado" | "creadoEn" | "expiradoEn" | "usuarioId" | "intentosFallidos", ExtArgs["result"]["verificacionSMS"]>
  export type VerificacionSMSInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type VerificacionSMSIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type VerificacionSMSIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $VerificacionSMSPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificacionSMS"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      telefono: string
      codigo: string
      usado: boolean
      creadoEn: Date
      expiradoEn: Date
      usuarioId: number
      intentosFallidos: number
    }, ExtArgs["result"]["verificacionSMS"]>
    composites: {}
  }

  type VerificacionSMSGetPayload<S extends boolean | null | undefined | VerificacionSMSDefaultArgs> = $Result.GetResult<Prisma.$VerificacionSMSPayload, S>

  type VerificacionSMSCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificacionSMSFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificacionSMSCountAggregateInputType | true
    }

  export interface VerificacionSMSDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificacionSMS'], meta: { name: 'VerificacionSMS' } }
    /**
     * Find zero or one VerificacionSMS that matches the filter.
     * @param {VerificacionSMSFindUniqueArgs} args - Arguments to find a VerificacionSMS
     * @example
     * // Get one VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificacionSMSFindUniqueArgs>(args: SelectSubset<T, VerificacionSMSFindUniqueArgs<ExtArgs>>): Prisma__VerificacionSMSClient<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificacionSMS that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificacionSMSFindUniqueOrThrowArgs} args - Arguments to find a VerificacionSMS
     * @example
     * // Get one VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificacionSMSFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificacionSMSFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificacionSMSClient<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificacionSMS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificacionSMSFindFirstArgs} args - Arguments to find a VerificacionSMS
     * @example
     * // Get one VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificacionSMSFindFirstArgs>(args?: SelectSubset<T, VerificacionSMSFindFirstArgs<ExtArgs>>): Prisma__VerificacionSMSClient<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificacionSMS that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificacionSMSFindFirstOrThrowArgs} args - Arguments to find a VerificacionSMS
     * @example
     * // Get one VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificacionSMSFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificacionSMSFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificacionSMSClient<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificacionSMS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificacionSMSFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.findMany()
     * 
     * // Get first 10 VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificacionSMSWithIdOnly = await prisma.verificacionSMS.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificacionSMSFindManyArgs>(args?: SelectSubset<T, VerificacionSMSFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificacionSMS.
     * @param {VerificacionSMSCreateArgs} args - Arguments to create a VerificacionSMS.
     * @example
     * // Create one VerificacionSMS
     * const VerificacionSMS = await prisma.verificacionSMS.create({
     *   data: {
     *     // ... data to create a VerificacionSMS
     *   }
     * })
     * 
     */
    create<T extends VerificacionSMSCreateArgs>(args: SelectSubset<T, VerificacionSMSCreateArgs<ExtArgs>>): Prisma__VerificacionSMSClient<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificacionSMS.
     * @param {VerificacionSMSCreateManyArgs} args - Arguments to create many VerificacionSMS.
     * @example
     * // Create many VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificacionSMSCreateManyArgs>(args?: SelectSubset<T, VerificacionSMSCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificacionSMS and returns the data saved in the database.
     * @param {VerificacionSMSCreateManyAndReturnArgs} args - Arguments to create many VerificacionSMS.
     * @example
     * // Create many VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificacionSMS and only return the `id`
     * const verificacionSMSWithIdOnly = await prisma.verificacionSMS.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificacionSMSCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificacionSMSCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificacionSMS.
     * @param {VerificacionSMSDeleteArgs} args - Arguments to delete one VerificacionSMS.
     * @example
     * // Delete one VerificacionSMS
     * const VerificacionSMS = await prisma.verificacionSMS.delete({
     *   where: {
     *     // ... filter to delete one VerificacionSMS
     *   }
     * })
     * 
     */
    delete<T extends VerificacionSMSDeleteArgs>(args: SelectSubset<T, VerificacionSMSDeleteArgs<ExtArgs>>): Prisma__VerificacionSMSClient<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificacionSMS.
     * @param {VerificacionSMSUpdateArgs} args - Arguments to update one VerificacionSMS.
     * @example
     * // Update one VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificacionSMSUpdateArgs>(args: SelectSubset<T, VerificacionSMSUpdateArgs<ExtArgs>>): Prisma__VerificacionSMSClient<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificacionSMS.
     * @param {VerificacionSMSDeleteManyArgs} args - Arguments to filter VerificacionSMS to delete.
     * @example
     * // Delete a few VerificacionSMS
     * const { count } = await prisma.verificacionSMS.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificacionSMSDeleteManyArgs>(args?: SelectSubset<T, VerificacionSMSDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificacionSMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificacionSMSUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificacionSMSUpdateManyArgs>(args: SelectSubset<T, VerificacionSMSUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificacionSMS and returns the data updated in the database.
     * @param {VerificacionSMSUpdateManyAndReturnArgs} args - Arguments to update many VerificacionSMS.
     * @example
     * // Update many VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificacionSMS and only return the `id`
     * const verificacionSMSWithIdOnly = await prisma.verificacionSMS.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificacionSMSUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificacionSMSUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificacionSMS.
     * @param {VerificacionSMSUpsertArgs} args - Arguments to update or create a VerificacionSMS.
     * @example
     * // Update or create a VerificacionSMS
     * const verificacionSMS = await prisma.verificacionSMS.upsert({
     *   create: {
     *     // ... data to create a VerificacionSMS
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificacionSMS we want to update
     *   }
     * })
     */
    upsert<T extends VerificacionSMSUpsertArgs>(args: SelectSubset<T, VerificacionSMSUpsertArgs<ExtArgs>>): Prisma__VerificacionSMSClient<$Result.GetResult<Prisma.$VerificacionSMSPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificacionSMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificacionSMSCountArgs} args - Arguments to filter VerificacionSMS to count.
     * @example
     * // Count the number of VerificacionSMS
     * const count = await prisma.verificacionSMS.count({
     *   where: {
     *     // ... the filter for the VerificacionSMS we want to count
     *   }
     * })
    **/
    count<T extends VerificacionSMSCountArgs>(
      args?: Subset<T, VerificacionSMSCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificacionSMSCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificacionSMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificacionSMSAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificacionSMSAggregateArgs>(args: Subset<T, VerificacionSMSAggregateArgs>): Prisma.PrismaPromise<GetVerificacionSMSAggregateType<T>>

    /**
     * Group by VerificacionSMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificacionSMSGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificacionSMSGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificacionSMSGroupByArgs['orderBy'] }
        : { orderBy?: VerificacionSMSGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificacionSMSGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificacionSMSGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificacionSMS model
   */
  readonly fields: VerificacionSMSFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificacionSMS.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificacionSMSClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificacionSMS model
   */
  interface VerificacionSMSFieldRefs {
    readonly id: FieldRef<"VerificacionSMS", 'Int'>
    readonly telefono: FieldRef<"VerificacionSMS", 'String'>
    readonly codigo: FieldRef<"VerificacionSMS", 'String'>
    readonly usado: FieldRef<"VerificacionSMS", 'Boolean'>
    readonly creadoEn: FieldRef<"VerificacionSMS", 'DateTime'>
    readonly expiradoEn: FieldRef<"VerificacionSMS", 'DateTime'>
    readonly usuarioId: FieldRef<"VerificacionSMS", 'Int'>
    readonly intentosFallidos: FieldRef<"VerificacionSMS", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * VerificacionSMS findUnique
   */
  export type VerificacionSMSFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSInclude<ExtArgs> | null
    /**
     * Filter, which VerificacionSMS to fetch.
     */
    where: VerificacionSMSWhereUniqueInput
  }

  /**
   * VerificacionSMS findUniqueOrThrow
   */
  export type VerificacionSMSFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSInclude<ExtArgs> | null
    /**
     * Filter, which VerificacionSMS to fetch.
     */
    where: VerificacionSMSWhereUniqueInput
  }

  /**
   * VerificacionSMS findFirst
   */
  export type VerificacionSMSFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSInclude<ExtArgs> | null
    /**
     * Filter, which VerificacionSMS to fetch.
     */
    where?: VerificacionSMSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificacionSMS to fetch.
     */
    orderBy?: VerificacionSMSOrderByWithRelationInput | VerificacionSMSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificacionSMS.
     */
    cursor?: VerificacionSMSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificacionSMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificacionSMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificacionSMS.
     */
    distinct?: VerificacionSMSScalarFieldEnum | VerificacionSMSScalarFieldEnum[]
  }

  /**
   * VerificacionSMS findFirstOrThrow
   */
  export type VerificacionSMSFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSInclude<ExtArgs> | null
    /**
     * Filter, which VerificacionSMS to fetch.
     */
    where?: VerificacionSMSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificacionSMS to fetch.
     */
    orderBy?: VerificacionSMSOrderByWithRelationInput | VerificacionSMSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificacionSMS.
     */
    cursor?: VerificacionSMSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificacionSMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificacionSMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificacionSMS.
     */
    distinct?: VerificacionSMSScalarFieldEnum | VerificacionSMSScalarFieldEnum[]
  }

  /**
   * VerificacionSMS findMany
   */
  export type VerificacionSMSFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSInclude<ExtArgs> | null
    /**
     * Filter, which VerificacionSMS to fetch.
     */
    where?: VerificacionSMSWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificacionSMS to fetch.
     */
    orderBy?: VerificacionSMSOrderByWithRelationInput | VerificacionSMSOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificacionSMS.
     */
    cursor?: VerificacionSMSWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificacionSMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificacionSMS.
     */
    skip?: number
    distinct?: VerificacionSMSScalarFieldEnum | VerificacionSMSScalarFieldEnum[]
  }

  /**
   * VerificacionSMS create
   */
  export type VerificacionSMSCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSInclude<ExtArgs> | null
    /**
     * The data needed to create a VerificacionSMS.
     */
    data: XOR<VerificacionSMSCreateInput, VerificacionSMSUncheckedCreateInput>
  }

  /**
   * VerificacionSMS createMany
   */
  export type VerificacionSMSCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificacionSMS.
     */
    data: VerificacionSMSCreateManyInput | VerificacionSMSCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificacionSMS createManyAndReturn
   */
  export type VerificacionSMSCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * The data used to create many VerificacionSMS.
     */
    data: VerificacionSMSCreateManyInput | VerificacionSMSCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VerificacionSMS update
   */
  export type VerificacionSMSUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSInclude<ExtArgs> | null
    /**
     * The data needed to update a VerificacionSMS.
     */
    data: XOR<VerificacionSMSUpdateInput, VerificacionSMSUncheckedUpdateInput>
    /**
     * Choose, which VerificacionSMS to update.
     */
    where: VerificacionSMSWhereUniqueInput
  }

  /**
   * VerificacionSMS updateMany
   */
  export type VerificacionSMSUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificacionSMS.
     */
    data: XOR<VerificacionSMSUpdateManyMutationInput, VerificacionSMSUncheckedUpdateManyInput>
    /**
     * Filter which VerificacionSMS to update
     */
    where?: VerificacionSMSWhereInput
    /**
     * Limit how many VerificacionSMS to update.
     */
    limit?: number
  }

  /**
   * VerificacionSMS updateManyAndReturn
   */
  export type VerificacionSMSUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * The data used to update VerificacionSMS.
     */
    data: XOR<VerificacionSMSUpdateManyMutationInput, VerificacionSMSUncheckedUpdateManyInput>
    /**
     * Filter which VerificacionSMS to update
     */
    where?: VerificacionSMSWhereInput
    /**
     * Limit how many VerificacionSMS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VerificacionSMS upsert
   */
  export type VerificacionSMSUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSInclude<ExtArgs> | null
    /**
     * The filter to search for the VerificacionSMS to update in case it exists.
     */
    where: VerificacionSMSWhereUniqueInput
    /**
     * In case the VerificacionSMS found by the `where` argument doesn't exist, create a new VerificacionSMS with this data.
     */
    create: XOR<VerificacionSMSCreateInput, VerificacionSMSUncheckedCreateInput>
    /**
     * In case the VerificacionSMS was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificacionSMSUpdateInput, VerificacionSMSUncheckedUpdateInput>
  }

  /**
   * VerificacionSMS delete
   */
  export type VerificacionSMSDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSInclude<ExtArgs> | null
    /**
     * Filter which VerificacionSMS to delete.
     */
    where: VerificacionSMSWhereUniqueInput
  }

  /**
   * VerificacionSMS deleteMany
   */
  export type VerificacionSMSDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificacionSMS to delete
     */
    where?: VerificacionSMSWhereInput
    /**
     * Limit how many VerificacionSMS to delete.
     */
    limit?: number
  }

  /**
   * VerificacionSMS without action
   */
  export type VerificacionSMSDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificacionSMS
     */
    select?: VerificacionSMSSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificacionSMS
     */
    omit?: VerificacionSMSOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificacionSMSInclude<ExtArgs> | null
  }


  /**
   * Model UsuarioClinica
   */

  export type AggregateUsuarioClinica = {
    _count: UsuarioClinicaCountAggregateOutputType | null
    _avg: UsuarioClinicaAvgAggregateOutputType | null
    _sum: UsuarioClinicaSumAggregateOutputType | null
    _min: UsuarioClinicaMinAggregateOutputType | null
    _max: UsuarioClinicaMaxAggregateOutputType | null
  }

  export type UsuarioClinicaAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    clinicaId: number | null
  }

  export type UsuarioClinicaSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    clinicaId: number | null
  }

  export type UsuarioClinicaMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    clinicaId: number | null
  }

  export type UsuarioClinicaMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    clinicaId: number | null
  }

  export type UsuarioClinicaCountAggregateOutputType = {
    id: number
    usuarioId: number
    clinicaId: number
    _all: number
  }


  export type UsuarioClinicaAvgAggregateInputType = {
    id?: true
    usuarioId?: true
    clinicaId?: true
  }

  export type UsuarioClinicaSumAggregateInputType = {
    id?: true
    usuarioId?: true
    clinicaId?: true
  }

  export type UsuarioClinicaMinAggregateInputType = {
    id?: true
    usuarioId?: true
    clinicaId?: true
  }

  export type UsuarioClinicaMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    clinicaId?: true
  }

  export type UsuarioClinicaCountAggregateInputType = {
    id?: true
    usuarioId?: true
    clinicaId?: true
    _all?: true
  }

  export type UsuarioClinicaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsuarioClinica to aggregate.
     */
    where?: UsuarioClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioClinicas to fetch.
     */
    orderBy?: UsuarioClinicaOrderByWithRelationInput | UsuarioClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioClinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsuarioClinicas
    **/
    _count?: true | UsuarioClinicaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioClinicaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioClinicaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioClinicaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioClinicaMaxAggregateInputType
  }

  export type GetUsuarioClinicaAggregateType<T extends UsuarioClinicaAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarioClinica]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarioClinica[P]>
      : GetScalarType<T[P], AggregateUsuarioClinica[P]>
  }




  export type UsuarioClinicaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioClinicaWhereInput
    orderBy?: UsuarioClinicaOrderByWithAggregationInput | UsuarioClinicaOrderByWithAggregationInput[]
    by: UsuarioClinicaScalarFieldEnum[] | UsuarioClinicaScalarFieldEnum
    having?: UsuarioClinicaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioClinicaCountAggregateInputType | true
    _avg?: UsuarioClinicaAvgAggregateInputType
    _sum?: UsuarioClinicaSumAggregateInputType
    _min?: UsuarioClinicaMinAggregateInputType
    _max?: UsuarioClinicaMaxAggregateInputType
  }

  export type UsuarioClinicaGroupByOutputType = {
    id: number
    usuarioId: number
    clinicaId: number
    _count: UsuarioClinicaCountAggregateOutputType | null
    _avg: UsuarioClinicaAvgAggregateOutputType | null
    _sum: UsuarioClinicaSumAggregateOutputType | null
    _min: UsuarioClinicaMinAggregateOutputType | null
    _max: UsuarioClinicaMaxAggregateOutputType | null
  }

  type GetUsuarioClinicaGroupByPayload<T extends UsuarioClinicaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioClinicaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioClinicaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioClinicaGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioClinicaGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioClinicaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    clinicaId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    clinica?: boolean | ClinicaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarioClinica"]>

  export type UsuarioClinicaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    clinicaId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    clinica?: boolean | ClinicaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarioClinica"]>

  export type UsuarioClinicaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    clinicaId?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    clinica?: boolean | ClinicaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarioClinica"]>

  export type UsuarioClinicaSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    clinicaId?: boolean
  }

  export type UsuarioClinicaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuarioId" | "clinicaId", ExtArgs["result"]["usuarioClinica"]>
  export type UsuarioClinicaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    clinica?: boolean | ClinicaDefaultArgs<ExtArgs>
  }
  export type UsuarioClinicaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    clinica?: boolean | ClinicaDefaultArgs<ExtArgs>
  }
  export type UsuarioClinicaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    clinica?: boolean | ClinicaDefaultArgs<ExtArgs>
  }

  export type $UsuarioClinicaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsuarioClinica"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      clinica: Prisma.$ClinicaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
      clinicaId: number
    }, ExtArgs["result"]["usuarioClinica"]>
    composites: {}
  }

  type UsuarioClinicaGetPayload<S extends boolean | null | undefined | UsuarioClinicaDefaultArgs> = $Result.GetResult<Prisma.$UsuarioClinicaPayload, S>

  type UsuarioClinicaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioClinicaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioClinicaCountAggregateInputType | true
    }

  export interface UsuarioClinicaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsuarioClinica'], meta: { name: 'UsuarioClinica' } }
    /**
     * Find zero or one UsuarioClinica that matches the filter.
     * @param {UsuarioClinicaFindUniqueArgs} args - Arguments to find a UsuarioClinica
     * @example
     * // Get one UsuarioClinica
     * const usuarioClinica = await prisma.usuarioClinica.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioClinicaFindUniqueArgs>(args: SelectSubset<T, UsuarioClinicaFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClinicaClient<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UsuarioClinica that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioClinicaFindUniqueOrThrowArgs} args - Arguments to find a UsuarioClinica
     * @example
     * // Get one UsuarioClinica
     * const usuarioClinica = await prisma.usuarioClinica.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioClinicaFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioClinicaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClinicaClient<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsuarioClinica that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioClinicaFindFirstArgs} args - Arguments to find a UsuarioClinica
     * @example
     * // Get one UsuarioClinica
     * const usuarioClinica = await prisma.usuarioClinica.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioClinicaFindFirstArgs>(args?: SelectSubset<T, UsuarioClinicaFindFirstArgs<ExtArgs>>): Prisma__UsuarioClinicaClient<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsuarioClinica that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioClinicaFindFirstOrThrowArgs} args - Arguments to find a UsuarioClinica
     * @example
     * // Get one UsuarioClinica
     * const usuarioClinica = await prisma.usuarioClinica.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioClinicaFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioClinicaFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClinicaClient<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UsuarioClinicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioClinicaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsuarioClinicas
     * const usuarioClinicas = await prisma.usuarioClinica.findMany()
     * 
     * // Get first 10 UsuarioClinicas
     * const usuarioClinicas = await prisma.usuarioClinica.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioClinicaWithIdOnly = await prisma.usuarioClinica.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioClinicaFindManyArgs>(args?: SelectSubset<T, UsuarioClinicaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UsuarioClinica.
     * @param {UsuarioClinicaCreateArgs} args - Arguments to create a UsuarioClinica.
     * @example
     * // Create one UsuarioClinica
     * const UsuarioClinica = await prisma.usuarioClinica.create({
     *   data: {
     *     // ... data to create a UsuarioClinica
     *   }
     * })
     * 
     */
    create<T extends UsuarioClinicaCreateArgs>(args: SelectSubset<T, UsuarioClinicaCreateArgs<ExtArgs>>): Prisma__UsuarioClinicaClient<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UsuarioClinicas.
     * @param {UsuarioClinicaCreateManyArgs} args - Arguments to create many UsuarioClinicas.
     * @example
     * // Create many UsuarioClinicas
     * const usuarioClinica = await prisma.usuarioClinica.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioClinicaCreateManyArgs>(args?: SelectSubset<T, UsuarioClinicaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UsuarioClinicas and returns the data saved in the database.
     * @param {UsuarioClinicaCreateManyAndReturnArgs} args - Arguments to create many UsuarioClinicas.
     * @example
     * // Create many UsuarioClinicas
     * const usuarioClinica = await prisma.usuarioClinica.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UsuarioClinicas and only return the `id`
     * const usuarioClinicaWithIdOnly = await prisma.usuarioClinica.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioClinicaCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioClinicaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UsuarioClinica.
     * @param {UsuarioClinicaDeleteArgs} args - Arguments to delete one UsuarioClinica.
     * @example
     * // Delete one UsuarioClinica
     * const UsuarioClinica = await prisma.usuarioClinica.delete({
     *   where: {
     *     // ... filter to delete one UsuarioClinica
     *   }
     * })
     * 
     */
    delete<T extends UsuarioClinicaDeleteArgs>(args: SelectSubset<T, UsuarioClinicaDeleteArgs<ExtArgs>>): Prisma__UsuarioClinicaClient<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UsuarioClinica.
     * @param {UsuarioClinicaUpdateArgs} args - Arguments to update one UsuarioClinica.
     * @example
     * // Update one UsuarioClinica
     * const usuarioClinica = await prisma.usuarioClinica.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioClinicaUpdateArgs>(args: SelectSubset<T, UsuarioClinicaUpdateArgs<ExtArgs>>): Prisma__UsuarioClinicaClient<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UsuarioClinicas.
     * @param {UsuarioClinicaDeleteManyArgs} args - Arguments to filter UsuarioClinicas to delete.
     * @example
     * // Delete a few UsuarioClinicas
     * const { count } = await prisma.usuarioClinica.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioClinicaDeleteManyArgs>(args?: SelectSubset<T, UsuarioClinicaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsuarioClinicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioClinicaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsuarioClinicas
     * const usuarioClinica = await prisma.usuarioClinica.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioClinicaUpdateManyArgs>(args: SelectSubset<T, UsuarioClinicaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsuarioClinicas and returns the data updated in the database.
     * @param {UsuarioClinicaUpdateManyAndReturnArgs} args - Arguments to update many UsuarioClinicas.
     * @example
     * // Update many UsuarioClinicas
     * const usuarioClinica = await prisma.usuarioClinica.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UsuarioClinicas and only return the `id`
     * const usuarioClinicaWithIdOnly = await prisma.usuarioClinica.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioClinicaUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioClinicaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UsuarioClinica.
     * @param {UsuarioClinicaUpsertArgs} args - Arguments to update or create a UsuarioClinica.
     * @example
     * // Update or create a UsuarioClinica
     * const usuarioClinica = await prisma.usuarioClinica.upsert({
     *   create: {
     *     // ... data to create a UsuarioClinica
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsuarioClinica we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioClinicaUpsertArgs>(args: SelectSubset<T, UsuarioClinicaUpsertArgs<ExtArgs>>): Prisma__UsuarioClinicaClient<$Result.GetResult<Prisma.$UsuarioClinicaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UsuarioClinicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioClinicaCountArgs} args - Arguments to filter UsuarioClinicas to count.
     * @example
     * // Count the number of UsuarioClinicas
     * const count = await prisma.usuarioClinica.count({
     *   where: {
     *     // ... the filter for the UsuarioClinicas we want to count
     *   }
     * })
    **/
    count<T extends UsuarioClinicaCountArgs>(
      args?: Subset<T, UsuarioClinicaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioClinicaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsuarioClinica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioClinicaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioClinicaAggregateArgs>(args: Subset<T, UsuarioClinicaAggregateArgs>): Prisma.PrismaPromise<GetUsuarioClinicaAggregateType<T>>

    /**
     * Group by UsuarioClinica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioClinicaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioClinicaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioClinicaGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioClinicaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioClinicaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioClinicaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsuarioClinica model
   */
  readonly fields: UsuarioClinicaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsuarioClinica.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClinicaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    clinica<T extends ClinicaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClinicaDefaultArgs<ExtArgs>>): Prisma__ClinicaClient<$Result.GetResult<Prisma.$ClinicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsuarioClinica model
   */
  interface UsuarioClinicaFieldRefs {
    readonly id: FieldRef<"UsuarioClinica", 'Int'>
    readonly usuarioId: FieldRef<"UsuarioClinica", 'Int'>
    readonly clinicaId: FieldRef<"UsuarioClinica", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UsuarioClinica findUnique
   */
  export type UsuarioClinicaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioClinica to fetch.
     */
    where: UsuarioClinicaWhereUniqueInput
  }

  /**
   * UsuarioClinica findUniqueOrThrow
   */
  export type UsuarioClinicaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioClinica to fetch.
     */
    where: UsuarioClinicaWhereUniqueInput
  }

  /**
   * UsuarioClinica findFirst
   */
  export type UsuarioClinicaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioClinica to fetch.
     */
    where?: UsuarioClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioClinicas to fetch.
     */
    orderBy?: UsuarioClinicaOrderByWithRelationInput | UsuarioClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsuarioClinicas.
     */
    cursor?: UsuarioClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioClinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsuarioClinicas.
     */
    distinct?: UsuarioClinicaScalarFieldEnum | UsuarioClinicaScalarFieldEnum[]
  }

  /**
   * UsuarioClinica findFirstOrThrow
   */
  export type UsuarioClinicaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioClinica to fetch.
     */
    where?: UsuarioClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioClinicas to fetch.
     */
    orderBy?: UsuarioClinicaOrderByWithRelationInput | UsuarioClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsuarioClinicas.
     */
    cursor?: UsuarioClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioClinicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsuarioClinicas.
     */
    distinct?: UsuarioClinicaScalarFieldEnum | UsuarioClinicaScalarFieldEnum[]
  }

  /**
   * UsuarioClinica findMany
   */
  export type UsuarioClinicaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioClinicas to fetch.
     */
    where?: UsuarioClinicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioClinicas to fetch.
     */
    orderBy?: UsuarioClinicaOrderByWithRelationInput | UsuarioClinicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsuarioClinicas.
     */
    cursor?: UsuarioClinicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioClinicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioClinicas.
     */
    skip?: number
    distinct?: UsuarioClinicaScalarFieldEnum | UsuarioClinicaScalarFieldEnum[]
  }

  /**
   * UsuarioClinica create
   */
  export type UsuarioClinicaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
    /**
     * The data needed to create a UsuarioClinica.
     */
    data: XOR<UsuarioClinicaCreateInput, UsuarioClinicaUncheckedCreateInput>
  }

  /**
   * UsuarioClinica createMany
   */
  export type UsuarioClinicaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsuarioClinicas.
     */
    data: UsuarioClinicaCreateManyInput | UsuarioClinicaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsuarioClinica createManyAndReturn
   */
  export type UsuarioClinicaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * The data used to create many UsuarioClinicas.
     */
    data: UsuarioClinicaCreateManyInput | UsuarioClinicaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsuarioClinica update
   */
  export type UsuarioClinicaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
    /**
     * The data needed to update a UsuarioClinica.
     */
    data: XOR<UsuarioClinicaUpdateInput, UsuarioClinicaUncheckedUpdateInput>
    /**
     * Choose, which UsuarioClinica to update.
     */
    where: UsuarioClinicaWhereUniqueInput
  }

  /**
   * UsuarioClinica updateMany
   */
  export type UsuarioClinicaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsuarioClinicas.
     */
    data: XOR<UsuarioClinicaUpdateManyMutationInput, UsuarioClinicaUncheckedUpdateManyInput>
    /**
     * Filter which UsuarioClinicas to update
     */
    where?: UsuarioClinicaWhereInput
    /**
     * Limit how many UsuarioClinicas to update.
     */
    limit?: number
  }

  /**
   * UsuarioClinica updateManyAndReturn
   */
  export type UsuarioClinicaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * The data used to update UsuarioClinicas.
     */
    data: XOR<UsuarioClinicaUpdateManyMutationInput, UsuarioClinicaUncheckedUpdateManyInput>
    /**
     * Filter which UsuarioClinicas to update
     */
    where?: UsuarioClinicaWhereInput
    /**
     * Limit how many UsuarioClinicas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsuarioClinica upsert
   */
  export type UsuarioClinicaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
    /**
     * The filter to search for the UsuarioClinica to update in case it exists.
     */
    where: UsuarioClinicaWhereUniqueInput
    /**
     * In case the UsuarioClinica found by the `where` argument doesn't exist, create a new UsuarioClinica with this data.
     */
    create: XOR<UsuarioClinicaCreateInput, UsuarioClinicaUncheckedCreateInput>
    /**
     * In case the UsuarioClinica was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioClinicaUpdateInput, UsuarioClinicaUncheckedUpdateInput>
  }

  /**
   * UsuarioClinica delete
   */
  export type UsuarioClinicaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
    /**
     * Filter which UsuarioClinica to delete.
     */
    where: UsuarioClinicaWhereUniqueInput
  }

  /**
   * UsuarioClinica deleteMany
   */
  export type UsuarioClinicaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsuarioClinicas to delete
     */
    where?: UsuarioClinicaWhereInput
    /**
     * Limit how many UsuarioClinicas to delete.
     */
    limit?: number
  }

  /**
   * UsuarioClinica without action
   */
  export type UsuarioClinicaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioClinica
     */
    select?: UsuarioClinicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsuarioClinica
     */
    omit?: UsuarioClinicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioClinicaInclude<ExtArgs> | null
  }


  /**
   * Model Acceso
   */

  export type AggregateAcceso = {
    _count: AccesoCountAggregateOutputType | null
    _avg: AccesoAvgAggregateOutputType | null
    _sum: AccesoSumAggregateOutputType | null
    _min: AccesoMinAggregateOutputType | null
    _max: AccesoMaxAggregateOutputType | null
  }

  export type AccesoAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type AccesoSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type AccesoMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    ip: string | null
    fecha: Date | null
    tipoAcceso: $Enums.TipoAcceso | null
  }

  export type AccesoMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    ip: string | null
    fecha: Date | null
    tipoAcceso: $Enums.TipoAcceso | null
  }

  export type AccesoCountAggregateOutputType = {
    id: number
    usuarioId: number
    ip: number
    fecha: number
    tipoAcceso: number
    _all: number
  }


  export type AccesoAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type AccesoSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type AccesoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    ip?: true
    fecha?: true
    tipoAcceso?: true
  }

  export type AccesoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    ip?: true
    fecha?: true
    tipoAcceso?: true
  }

  export type AccesoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    ip?: true
    fecha?: true
    tipoAcceso?: true
    _all?: true
  }

  export type AccesoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Acceso to aggregate.
     */
    where?: AccesoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accesos to fetch.
     */
    orderBy?: AccesoOrderByWithRelationInput | AccesoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccesoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accesos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accesos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accesos
    **/
    _count?: true | AccesoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccesoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccesoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccesoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccesoMaxAggregateInputType
  }

  export type GetAccesoAggregateType<T extends AccesoAggregateArgs> = {
        [P in keyof T & keyof AggregateAcceso]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcceso[P]>
      : GetScalarType<T[P], AggregateAcceso[P]>
  }




  export type AccesoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccesoWhereInput
    orderBy?: AccesoOrderByWithAggregationInput | AccesoOrderByWithAggregationInput[]
    by: AccesoScalarFieldEnum[] | AccesoScalarFieldEnum
    having?: AccesoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccesoCountAggregateInputType | true
    _avg?: AccesoAvgAggregateInputType
    _sum?: AccesoSumAggregateInputType
    _min?: AccesoMinAggregateInputType
    _max?: AccesoMaxAggregateInputType
  }

  export type AccesoGroupByOutputType = {
    id: number
    usuarioId: number | null
    ip: string
    fecha: Date
    tipoAcceso: $Enums.TipoAcceso
    _count: AccesoCountAggregateOutputType | null
    _avg: AccesoAvgAggregateOutputType | null
    _sum: AccesoSumAggregateOutputType | null
    _min: AccesoMinAggregateOutputType | null
    _max: AccesoMaxAggregateOutputType | null
  }

  type GetAccesoGroupByPayload<T extends AccesoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccesoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccesoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccesoGroupByOutputType[P]>
            : GetScalarType<T[P], AccesoGroupByOutputType[P]>
        }
      >
    >


  export type AccesoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    ip?: boolean
    fecha?: boolean
    tipoAcceso?: boolean
    usuario?: boolean | Acceso$usuarioArgs<ExtArgs>
  }, ExtArgs["result"]["acceso"]>

  export type AccesoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    ip?: boolean
    fecha?: boolean
    tipoAcceso?: boolean
    usuario?: boolean | Acceso$usuarioArgs<ExtArgs>
  }, ExtArgs["result"]["acceso"]>

  export type AccesoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    ip?: boolean
    fecha?: boolean
    tipoAcceso?: boolean
    usuario?: boolean | Acceso$usuarioArgs<ExtArgs>
  }, ExtArgs["result"]["acceso"]>

  export type AccesoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    ip?: boolean
    fecha?: boolean
    tipoAcceso?: boolean
  }

  export type AccesoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuarioId" | "ip" | "fecha" | "tipoAcceso", ExtArgs["result"]["acceso"]>
  export type AccesoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Acceso$usuarioArgs<ExtArgs>
  }
  export type AccesoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Acceso$usuarioArgs<ExtArgs>
  }
  export type AccesoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | Acceso$usuarioArgs<ExtArgs>
  }

  export type $AccesoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Acceso"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number | null
      ip: string
      fecha: Date
      tipoAcceso: $Enums.TipoAcceso
    }, ExtArgs["result"]["acceso"]>
    composites: {}
  }

  type AccesoGetPayload<S extends boolean | null | undefined | AccesoDefaultArgs> = $Result.GetResult<Prisma.$AccesoPayload, S>

  type AccesoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccesoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccesoCountAggregateInputType | true
    }

  export interface AccesoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Acceso'], meta: { name: 'Acceso' } }
    /**
     * Find zero or one Acceso that matches the filter.
     * @param {AccesoFindUniqueArgs} args - Arguments to find a Acceso
     * @example
     * // Get one Acceso
     * const acceso = await prisma.acceso.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccesoFindUniqueArgs>(args: SelectSubset<T, AccesoFindUniqueArgs<ExtArgs>>): Prisma__AccesoClient<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Acceso that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccesoFindUniqueOrThrowArgs} args - Arguments to find a Acceso
     * @example
     * // Get one Acceso
     * const acceso = await prisma.acceso.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccesoFindUniqueOrThrowArgs>(args: SelectSubset<T, AccesoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccesoClient<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Acceso that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccesoFindFirstArgs} args - Arguments to find a Acceso
     * @example
     * // Get one Acceso
     * const acceso = await prisma.acceso.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccesoFindFirstArgs>(args?: SelectSubset<T, AccesoFindFirstArgs<ExtArgs>>): Prisma__AccesoClient<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Acceso that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccesoFindFirstOrThrowArgs} args - Arguments to find a Acceso
     * @example
     * // Get one Acceso
     * const acceso = await prisma.acceso.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccesoFindFirstOrThrowArgs>(args?: SelectSubset<T, AccesoFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccesoClient<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accesos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccesoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accesos
     * const accesos = await prisma.acceso.findMany()
     * 
     * // Get first 10 Accesos
     * const accesos = await prisma.acceso.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accesoWithIdOnly = await prisma.acceso.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccesoFindManyArgs>(args?: SelectSubset<T, AccesoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Acceso.
     * @param {AccesoCreateArgs} args - Arguments to create a Acceso.
     * @example
     * // Create one Acceso
     * const Acceso = await prisma.acceso.create({
     *   data: {
     *     // ... data to create a Acceso
     *   }
     * })
     * 
     */
    create<T extends AccesoCreateArgs>(args: SelectSubset<T, AccesoCreateArgs<ExtArgs>>): Prisma__AccesoClient<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accesos.
     * @param {AccesoCreateManyArgs} args - Arguments to create many Accesos.
     * @example
     * // Create many Accesos
     * const acceso = await prisma.acceso.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccesoCreateManyArgs>(args?: SelectSubset<T, AccesoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accesos and returns the data saved in the database.
     * @param {AccesoCreateManyAndReturnArgs} args - Arguments to create many Accesos.
     * @example
     * // Create many Accesos
     * const acceso = await prisma.acceso.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accesos and only return the `id`
     * const accesoWithIdOnly = await prisma.acceso.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccesoCreateManyAndReturnArgs>(args?: SelectSubset<T, AccesoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Acceso.
     * @param {AccesoDeleteArgs} args - Arguments to delete one Acceso.
     * @example
     * // Delete one Acceso
     * const Acceso = await prisma.acceso.delete({
     *   where: {
     *     // ... filter to delete one Acceso
     *   }
     * })
     * 
     */
    delete<T extends AccesoDeleteArgs>(args: SelectSubset<T, AccesoDeleteArgs<ExtArgs>>): Prisma__AccesoClient<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Acceso.
     * @param {AccesoUpdateArgs} args - Arguments to update one Acceso.
     * @example
     * // Update one Acceso
     * const acceso = await prisma.acceso.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccesoUpdateArgs>(args: SelectSubset<T, AccesoUpdateArgs<ExtArgs>>): Prisma__AccesoClient<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accesos.
     * @param {AccesoDeleteManyArgs} args - Arguments to filter Accesos to delete.
     * @example
     * // Delete a few Accesos
     * const { count } = await prisma.acceso.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccesoDeleteManyArgs>(args?: SelectSubset<T, AccesoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accesos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccesoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accesos
     * const acceso = await prisma.acceso.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccesoUpdateManyArgs>(args: SelectSubset<T, AccesoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accesos and returns the data updated in the database.
     * @param {AccesoUpdateManyAndReturnArgs} args - Arguments to update many Accesos.
     * @example
     * // Update many Accesos
     * const acceso = await prisma.acceso.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accesos and only return the `id`
     * const accesoWithIdOnly = await prisma.acceso.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccesoUpdateManyAndReturnArgs>(args: SelectSubset<T, AccesoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Acceso.
     * @param {AccesoUpsertArgs} args - Arguments to update or create a Acceso.
     * @example
     * // Update or create a Acceso
     * const acceso = await prisma.acceso.upsert({
     *   create: {
     *     // ... data to create a Acceso
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Acceso we want to update
     *   }
     * })
     */
    upsert<T extends AccesoUpsertArgs>(args: SelectSubset<T, AccesoUpsertArgs<ExtArgs>>): Prisma__AccesoClient<$Result.GetResult<Prisma.$AccesoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accesos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccesoCountArgs} args - Arguments to filter Accesos to count.
     * @example
     * // Count the number of Accesos
     * const count = await prisma.acceso.count({
     *   where: {
     *     // ... the filter for the Accesos we want to count
     *   }
     * })
    **/
    count<T extends AccesoCountArgs>(
      args?: Subset<T, AccesoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccesoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Acceso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccesoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccesoAggregateArgs>(args: Subset<T, AccesoAggregateArgs>): Prisma.PrismaPromise<GetAccesoAggregateType<T>>

    /**
     * Group by Acceso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccesoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccesoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccesoGroupByArgs['orderBy'] }
        : { orderBy?: AccesoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccesoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccesoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Acceso model
   */
  readonly fields: AccesoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Acceso.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccesoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends Acceso$usuarioArgs<ExtArgs> = {}>(args?: Subset<T, Acceso$usuarioArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Acceso model
   */
  interface AccesoFieldRefs {
    readonly id: FieldRef<"Acceso", 'Int'>
    readonly usuarioId: FieldRef<"Acceso", 'Int'>
    readonly ip: FieldRef<"Acceso", 'String'>
    readonly fecha: FieldRef<"Acceso", 'DateTime'>
    readonly tipoAcceso: FieldRef<"Acceso", 'TipoAcceso'>
  }
    

  // Custom InputTypes
  /**
   * Acceso findUnique
   */
  export type AccesoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoInclude<ExtArgs> | null
    /**
     * Filter, which Acceso to fetch.
     */
    where: AccesoWhereUniqueInput
  }

  /**
   * Acceso findUniqueOrThrow
   */
  export type AccesoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoInclude<ExtArgs> | null
    /**
     * Filter, which Acceso to fetch.
     */
    where: AccesoWhereUniqueInput
  }

  /**
   * Acceso findFirst
   */
  export type AccesoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoInclude<ExtArgs> | null
    /**
     * Filter, which Acceso to fetch.
     */
    where?: AccesoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accesos to fetch.
     */
    orderBy?: AccesoOrderByWithRelationInput | AccesoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accesos.
     */
    cursor?: AccesoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accesos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accesos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accesos.
     */
    distinct?: AccesoScalarFieldEnum | AccesoScalarFieldEnum[]
  }

  /**
   * Acceso findFirstOrThrow
   */
  export type AccesoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoInclude<ExtArgs> | null
    /**
     * Filter, which Acceso to fetch.
     */
    where?: AccesoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accesos to fetch.
     */
    orderBy?: AccesoOrderByWithRelationInput | AccesoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accesos.
     */
    cursor?: AccesoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accesos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accesos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accesos.
     */
    distinct?: AccesoScalarFieldEnum | AccesoScalarFieldEnum[]
  }

  /**
   * Acceso findMany
   */
  export type AccesoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoInclude<ExtArgs> | null
    /**
     * Filter, which Accesos to fetch.
     */
    where?: AccesoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accesos to fetch.
     */
    orderBy?: AccesoOrderByWithRelationInput | AccesoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accesos.
     */
    cursor?: AccesoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accesos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accesos.
     */
    skip?: number
    distinct?: AccesoScalarFieldEnum | AccesoScalarFieldEnum[]
  }

  /**
   * Acceso create
   */
  export type AccesoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoInclude<ExtArgs> | null
    /**
     * The data needed to create a Acceso.
     */
    data: XOR<AccesoCreateInput, AccesoUncheckedCreateInput>
  }

  /**
   * Acceso createMany
   */
  export type AccesoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accesos.
     */
    data: AccesoCreateManyInput | AccesoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Acceso createManyAndReturn
   */
  export type AccesoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * The data used to create many Accesos.
     */
    data: AccesoCreateManyInput | AccesoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Acceso update
   */
  export type AccesoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoInclude<ExtArgs> | null
    /**
     * The data needed to update a Acceso.
     */
    data: XOR<AccesoUpdateInput, AccesoUncheckedUpdateInput>
    /**
     * Choose, which Acceso to update.
     */
    where: AccesoWhereUniqueInput
  }

  /**
   * Acceso updateMany
   */
  export type AccesoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accesos.
     */
    data: XOR<AccesoUpdateManyMutationInput, AccesoUncheckedUpdateManyInput>
    /**
     * Filter which Accesos to update
     */
    where?: AccesoWhereInput
    /**
     * Limit how many Accesos to update.
     */
    limit?: number
  }

  /**
   * Acceso updateManyAndReturn
   */
  export type AccesoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * The data used to update Accesos.
     */
    data: XOR<AccesoUpdateManyMutationInput, AccesoUncheckedUpdateManyInput>
    /**
     * Filter which Accesos to update
     */
    where?: AccesoWhereInput
    /**
     * Limit how many Accesos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Acceso upsert
   */
  export type AccesoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoInclude<ExtArgs> | null
    /**
     * The filter to search for the Acceso to update in case it exists.
     */
    where: AccesoWhereUniqueInput
    /**
     * In case the Acceso found by the `where` argument doesn't exist, create a new Acceso with this data.
     */
    create: XOR<AccesoCreateInput, AccesoUncheckedCreateInput>
    /**
     * In case the Acceso was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccesoUpdateInput, AccesoUncheckedUpdateInput>
  }

  /**
   * Acceso delete
   */
  export type AccesoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoInclude<ExtArgs> | null
    /**
     * Filter which Acceso to delete.
     */
    where: AccesoWhereUniqueInput
  }

  /**
   * Acceso deleteMany
   */
  export type AccesoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accesos to delete
     */
    where?: AccesoWhereInput
    /**
     * Limit how many Accesos to delete.
     */
    limit?: number
  }

  /**
   * Acceso.usuario
   */
  export type Acceso$usuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
  }

  /**
   * Acceso without action
   */
  export type AccesoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Acceso
     */
    select?: AccesoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Acceso
     */
    omit?: AccesoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccesoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    correo: 'correo',
    contraseña: 'contraseña',
    rol: 'rol',
    creadoEn: 'creadoEn',
    ultimaConexion: 'ultimaConexion',
    activo: 'activo',
    verificadoEmail: 'verificadoEmail',
    propietarioId: 'propietarioId'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const PropietarioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    creadoEn: 'creadoEn',
    telefonoPrincipal: 'telefonoPrincipal',
    telefonoSecundario1: 'telefonoSecundario1',
    telefonoSecundario2: 'telefonoSecundario2',
    usuarioId: 'usuarioId'
  };

  export type PropietarioScalarFieldEnum = (typeof PropietarioScalarFieldEnum)[keyof typeof PropietarioScalarFieldEnum]


  export const ClinicaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    direccion: 'direccion',
    telefono: 'telefono',
    tipo: 'tipo',
    creadoEn: 'creadoEn'
  };

  export type ClinicaScalarFieldEnum = (typeof ClinicaScalarFieldEnum)[keyof typeof ClinicaScalarFieldEnum]


  export const VerificacionSMSScalarFieldEnum: {
    id: 'id',
    telefono: 'telefono',
    codigo: 'codigo',
    usado: 'usado',
    creadoEn: 'creadoEn',
    expiradoEn: 'expiradoEn',
    usuarioId: 'usuarioId',
    intentosFallidos: 'intentosFallidos'
  };

  export type VerificacionSMSScalarFieldEnum = (typeof VerificacionSMSScalarFieldEnum)[keyof typeof VerificacionSMSScalarFieldEnum]


  export const UsuarioClinicaScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    clinicaId: 'clinicaId'
  };

  export type UsuarioClinicaScalarFieldEnum = (typeof UsuarioClinicaScalarFieldEnum)[keyof typeof UsuarioClinicaScalarFieldEnum]


  export const AccesoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    ip: 'ip',
    fecha: 'fecha',
    tipoAcceso: 'tipoAcceso'
  };

  export type AccesoScalarFieldEnum = (typeof AccesoScalarFieldEnum)[keyof typeof AccesoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Rol'
   */
  export type EnumRolFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rol'>
    


  /**
   * Reference to a field of type 'Rol[]'
   */
  export type ListEnumRolFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Rol[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'TipoAcceso'
   */
  export type EnumTipoAccesoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoAcceso'>
    


  /**
   * Reference to a field of type 'TipoAcceso[]'
   */
  export type ListEnumTipoAccesoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoAcceso[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    correo?: StringFilter<"Usuario"> | string
    contraseña?: StringFilter<"Usuario"> | string
    rol?: EnumRolFilter<"Usuario"> | $Enums.Rol
    creadoEn?: DateTimeFilter<"Usuario"> | Date | string
    ultimaConexion?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    activo?: BoolFilter<"Usuario"> | boolean
    verificadoEmail?: BoolFilter<"Usuario"> | boolean
    propietarioId?: IntNullableFilter<"Usuario"> | number | null
    propietario?: XOR<PropietarioNullableScalarRelationFilter, PropietarioWhereInput> | null
    usuarioClinicas?: UsuarioClinicaListRelationFilter
    accesos?: AccesoListRelationFilter
    verificacionesSMS?: VerificacionSMSListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    correo?: SortOrder
    contraseña?: SortOrder
    rol?: SortOrder
    creadoEn?: SortOrder
    ultimaConexion?: SortOrderInput | SortOrder
    activo?: SortOrder
    verificadoEmail?: SortOrder
    propietarioId?: SortOrderInput | SortOrder
    propietario?: PropietarioOrderByWithRelationInput
    usuarioClinicas?: UsuarioClinicaOrderByRelationAggregateInput
    accesos?: AccesoOrderByRelationAggregateInput
    verificacionesSMS?: VerificacionSMSOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    correo?: string
    propietarioId?: number
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    contraseña?: StringFilter<"Usuario"> | string
    rol?: EnumRolFilter<"Usuario"> | $Enums.Rol
    creadoEn?: DateTimeFilter<"Usuario"> | Date | string
    ultimaConexion?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    activo?: BoolFilter<"Usuario"> | boolean
    verificadoEmail?: BoolFilter<"Usuario"> | boolean
    propietario?: XOR<PropietarioNullableScalarRelationFilter, PropietarioWhereInput> | null
    usuarioClinicas?: UsuarioClinicaListRelationFilter
    accesos?: AccesoListRelationFilter
    verificacionesSMS?: VerificacionSMSListRelationFilter
  }, "id" | "correo" | "propietarioId">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    correo?: SortOrder
    contraseña?: SortOrder
    rol?: SortOrder
    creadoEn?: SortOrder
    ultimaConexion?: SortOrderInput | SortOrder
    activo?: SortOrder
    verificadoEmail?: SortOrder
    propietarioId?: SortOrderInput | SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    correo?: StringWithAggregatesFilter<"Usuario"> | string
    contraseña?: StringWithAggregatesFilter<"Usuario"> | string
    rol?: EnumRolWithAggregatesFilter<"Usuario"> | $Enums.Rol
    creadoEn?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
    ultimaConexion?: DateTimeNullableWithAggregatesFilter<"Usuario"> | Date | string | null
    activo?: BoolWithAggregatesFilter<"Usuario"> | boolean
    verificadoEmail?: BoolWithAggregatesFilter<"Usuario"> | boolean
    propietarioId?: IntNullableWithAggregatesFilter<"Usuario"> | number | null
  }

  export type PropietarioWhereInput = {
    AND?: PropietarioWhereInput | PropietarioWhereInput[]
    OR?: PropietarioWhereInput[]
    NOT?: PropietarioWhereInput | PropietarioWhereInput[]
    id?: IntFilter<"Propietario"> | number
    nombre?: StringFilter<"Propietario"> | string
    creadoEn?: DateTimeFilter<"Propietario"> | Date | string
    telefonoPrincipal?: StringFilter<"Propietario"> | string
    telefonoSecundario1?: StringNullableFilter<"Propietario"> | string | null
    telefonoSecundario2?: StringNullableFilter<"Propietario"> | string | null
    usuarioId?: IntNullableFilter<"Propietario"> | number | null
    usuario?: XOR<UsuarioNullableScalarRelationFilter, UsuarioWhereInput> | null
  }

  export type PropietarioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    creadoEn?: SortOrder
    telefonoPrincipal?: SortOrder
    telefonoSecundario1?: SortOrderInput | SortOrder
    telefonoSecundario2?: SortOrderInput | SortOrder
    usuarioId?: SortOrderInput | SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type PropietarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuarioId?: number
    AND?: PropietarioWhereInput | PropietarioWhereInput[]
    OR?: PropietarioWhereInput[]
    NOT?: PropietarioWhereInput | PropietarioWhereInput[]
    nombre?: StringFilter<"Propietario"> | string
    creadoEn?: DateTimeFilter<"Propietario"> | Date | string
    telefonoPrincipal?: StringFilter<"Propietario"> | string
    telefonoSecundario1?: StringNullableFilter<"Propietario"> | string | null
    telefonoSecundario2?: StringNullableFilter<"Propietario"> | string | null
    usuario?: XOR<UsuarioNullableScalarRelationFilter, UsuarioWhereInput> | null
  }, "id" | "usuarioId">

  export type PropietarioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    creadoEn?: SortOrder
    telefonoPrincipal?: SortOrder
    telefonoSecundario1?: SortOrderInput | SortOrder
    telefonoSecundario2?: SortOrderInput | SortOrder
    usuarioId?: SortOrderInput | SortOrder
    _count?: PropietarioCountOrderByAggregateInput
    _avg?: PropietarioAvgOrderByAggregateInput
    _max?: PropietarioMaxOrderByAggregateInput
    _min?: PropietarioMinOrderByAggregateInput
    _sum?: PropietarioSumOrderByAggregateInput
  }

  export type PropietarioScalarWhereWithAggregatesInput = {
    AND?: PropietarioScalarWhereWithAggregatesInput | PropietarioScalarWhereWithAggregatesInput[]
    OR?: PropietarioScalarWhereWithAggregatesInput[]
    NOT?: PropietarioScalarWhereWithAggregatesInput | PropietarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Propietario"> | number
    nombre?: StringWithAggregatesFilter<"Propietario"> | string
    creadoEn?: DateTimeWithAggregatesFilter<"Propietario"> | Date | string
    telefonoPrincipal?: StringWithAggregatesFilter<"Propietario"> | string
    telefonoSecundario1?: StringNullableWithAggregatesFilter<"Propietario"> | string | null
    telefonoSecundario2?: StringNullableWithAggregatesFilter<"Propietario"> | string | null
    usuarioId?: IntNullableWithAggregatesFilter<"Propietario"> | number | null
  }

  export type ClinicaWhereInput = {
    AND?: ClinicaWhereInput | ClinicaWhereInput[]
    OR?: ClinicaWhereInput[]
    NOT?: ClinicaWhereInput | ClinicaWhereInput[]
    id?: IntFilter<"Clinica"> | number
    nombre?: StringFilter<"Clinica"> | string
    direccion?: StringFilter<"Clinica"> | string
    telefono?: StringFilter<"Clinica"> | string
    tipo?: StringFilter<"Clinica"> | string
    creadoEn?: DateTimeFilter<"Clinica"> | Date | string
    usuarioClinicas?: UsuarioClinicaListRelationFilter
  }

  export type ClinicaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    tipo?: SortOrder
    creadoEn?: SortOrder
    usuarioClinicas?: UsuarioClinicaOrderByRelationAggregateInput
  }

  export type ClinicaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClinicaWhereInput | ClinicaWhereInput[]
    OR?: ClinicaWhereInput[]
    NOT?: ClinicaWhereInput | ClinicaWhereInput[]
    nombre?: StringFilter<"Clinica"> | string
    direccion?: StringFilter<"Clinica"> | string
    telefono?: StringFilter<"Clinica"> | string
    tipo?: StringFilter<"Clinica"> | string
    creadoEn?: DateTimeFilter<"Clinica"> | Date | string
    usuarioClinicas?: UsuarioClinicaListRelationFilter
  }, "id">

  export type ClinicaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    tipo?: SortOrder
    creadoEn?: SortOrder
    _count?: ClinicaCountOrderByAggregateInput
    _avg?: ClinicaAvgOrderByAggregateInput
    _max?: ClinicaMaxOrderByAggregateInput
    _min?: ClinicaMinOrderByAggregateInput
    _sum?: ClinicaSumOrderByAggregateInput
  }

  export type ClinicaScalarWhereWithAggregatesInput = {
    AND?: ClinicaScalarWhereWithAggregatesInput | ClinicaScalarWhereWithAggregatesInput[]
    OR?: ClinicaScalarWhereWithAggregatesInput[]
    NOT?: ClinicaScalarWhereWithAggregatesInput | ClinicaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Clinica"> | number
    nombre?: StringWithAggregatesFilter<"Clinica"> | string
    direccion?: StringWithAggregatesFilter<"Clinica"> | string
    telefono?: StringWithAggregatesFilter<"Clinica"> | string
    tipo?: StringWithAggregatesFilter<"Clinica"> | string
    creadoEn?: DateTimeWithAggregatesFilter<"Clinica"> | Date | string
  }

  export type VerificacionSMSWhereInput = {
    AND?: VerificacionSMSWhereInput | VerificacionSMSWhereInput[]
    OR?: VerificacionSMSWhereInput[]
    NOT?: VerificacionSMSWhereInput | VerificacionSMSWhereInput[]
    id?: IntFilter<"VerificacionSMS"> | number
    telefono?: StringFilter<"VerificacionSMS"> | string
    codigo?: StringFilter<"VerificacionSMS"> | string
    usado?: BoolFilter<"VerificacionSMS"> | boolean
    creadoEn?: DateTimeFilter<"VerificacionSMS"> | Date | string
    expiradoEn?: DateTimeFilter<"VerificacionSMS"> | Date | string
    usuarioId?: IntFilter<"VerificacionSMS"> | number
    intentosFallidos?: IntFilter<"VerificacionSMS"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }

  export type VerificacionSMSOrderByWithRelationInput = {
    id?: SortOrder
    telefono?: SortOrder
    codigo?: SortOrder
    usado?: SortOrder
    creadoEn?: SortOrder
    expiradoEn?: SortOrder
    usuarioId?: SortOrder
    intentosFallidos?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type VerificacionSMSWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VerificacionSMSWhereInput | VerificacionSMSWhereInput[]
    OR?: VerificacionSMSWhereInput[]
    NOT?: VerificacionSMSWhereInput | VerificacionSMSWhereInput[]
    telefono?: StringFilter<"VerificacionSMS"> | string
    codigo?: StringFilter<"VerificacionSMS"> | string
    usado?: BoolFilter<"VerificacionSMS"> | boolean
    creadoEn?: DateTimeFilter<"VerificacionSMS"> | Date | string
    expiradoEn?: DateTimeFilter<"VerificacionSMS"> | Date | string
    usuarioId?: IntFilter<"VerificacionSMS"> | number
    intentosFallidos?: IntFilter<"VerificacionSMS"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
  }, "id">

  export type VerificacionSMSOrderByWithAggregationInput = {
    id?: SortOrder
    telefono?: SortOrder
    codigo?: SortOrder
    usado?: SortOrder
    creadoEn?: SortOrder
    expiradoEn?: SortOrder
    usuarioId?: SortOrder
    intentosFallidos?: SortOrder
    _count?: VerificacionSMSCountOrderByAggregateInput
    _avg?: VerificacionSMSAvgOrderByAggregateInput
    _max?: VerificacionSMSMaxOrderByAggregateInput
    _min?: VerificacionSMSMinOrderByAggregateInput
    _sum?: VerificacionSMSSumOrderByAggregateInput
  }

  export type VerificacionSMSScalarWhereWithAggregatesInput = {
    AND?: VerificacionSMSScalarWhereWithAggregatesInput | VerificacionSMSScalarWhereWithAggregatesInput[]
    OR?: VerificacionSMSScalarWhereWithAggregatesInput[]
    NOT?: VerificacionSMSScalarWhereWithAggregatesInput | VerificacionSMSScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VerificacionSMS"> | number
    telefono?: StringWithAggregatesFilter<"VerificacionSMS"> | string
    codigo?: StringWithAggregatesFilter<"VerificacionSMS"> | string
    usado?: BoolWithAggregatesFilter<"VerificacionSMS"> | boolean
    creadoEn?: DateTimeWithAggregatesFilter<"VerificacionSMS"> | Date | string
    expiradoEn?: DateTimeWithAggregatesFilter<"VerificacionSMS"> | Date | string
    usuarioId?: IntWithAggregatesFilter<"VerificacionSMS"> | number
    intentosFallidos?: IntWithAggregatesFilter<"VerificacionSMS"> | number
  }

  export type UsuarioClinicaWhereInput = {
    AND?: UsuarioClinicaWhereInput | UsuarioClinicaWhereInput[]
    OR?: UsuarioClinicaWhereInput[]
    NOT?: UsuarioClinicaWhereInput | UsuarioClinicaWhereInput[]
    id?: IntFilter<"UsuarioClinica"> | number
    usuarioId?: IntFilter<"UsuarioClinica"> | number
    clinicaId?: IntFilter<"UsuarioClinica"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    clinica?: XOR<ClinicaScalarRelationFilter, ClinicaWhereInput>
  }

  export type UsuarioClinicaOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    clinicaId?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    clinica?: ClinicaOrderByWithRelationInput
  }

  export type UsuarioClinicaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuarioId_clinicaId?: UsuarioClinicaUsuarioIdClinicaIdCompoundUniqueInput
    AND?: UsuarioClinicaWhereInput | UsuarioClinicaWhereInput[]
    OR?: UsuarioClinicaWhereInput[]
    NOT?: UsuarioClinicaWhereInput | UsuarioClinicaWhereInput[]
    usuarioId?: IntFilter<"UsuarioClinica"> | number
    clinicaId?: IntFilter<"UsuarioClinica"> | number
    usuario?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    clinica?: XOR<ClinicaScalarRelationFilter, ClinicaWhereInput>
  }, "id" | "usuarioId_clinicaId">

  export type UsuarioClinicaOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    clinicaId?: SortOrder
    _count?: UsuarioClinicaCountOrderByAggregateInput
    _avg?: UsuarioClinicaAvgOrderByAggregateInput
    _max?: UsuarioClinicaMaxOrderByAggregateInput
    _min?: UsuarioClinicaMinOrderByAggregateInput
    _sum?: UsuarioClinicaSumOrderByAggregateInput
  }

  export type UsuarioClinicaScalarWhereWithAggregatesInput = {
    AND?: UsuarioClinicaScalarWhereWithAggregatesInput | UsuarioClinicaScalarWhereWithAggregatesInput[]
    OR?: UsuarioClinicaScalarWhereWithAggregatesInput[]
    NOT?: UsuarioClinicaScalarWhereWithAggregatesInput | UsuarioClinicaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UsuarioClinica"> | number
    usuarioId?: IntWithAggregatesFilter<"UsuarioClinica"> | number
    clinicaId?: IntWithAggregatesFilter<"UsuarioClinica"> | number
  }

  export type AccesoWhereInput = {
    AND?: AccesoWhereInput | AccesoWhereInput[]
    OR?: AccesoWhereInput[]
    NOT?: AccesoWhereInput | AccesoWhereInput[]
    id?: IntFilter<"Acceso"> | number
    usuarioId?: IntNullableFilter<"Acceso"> | number | null
    ip?: StringFilter<"Acceso"> | string
    fecha?: DateTimeFilter<"Acceso"> | Date | string
    tipoAcceso?: EnumTipoAccesoFilter<"Acceso"> | $Enums.TipoAcceso
    usuario?: XOR<UsuarioNullableScalarRelationFilter, UsuarioWhereInput> | null
  }

  export type AccesoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    ip?: SortOrder
    fecha?: SortOrder
    tipoAcceso?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type AccesoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AccesoWhereInput | AccesoWhereInput[]
    OR?: AccesoWhereInput[]
    NOT?: AccesoWhereInput | AccesoWhereInput[]
    usuarioId?: IntNullableFilter<"Acceso"> | number | null
    ip?: StringFilter<"Acceso"> | string
    fecha?: DateTimeFilter<"Acceso"> | Date | string
    tipoAcceso?: EnumTipoAccesoFilter<"Acceso"> | $Enums.TipoAcceso
    usuario?: XOR<UsuarioNullableScalarRelationFilter, UsuarioWhereInput> | null
  }, "id">

  export type AccesoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    ip?: SortOrder
    fecha?: SortOrder
    tipoAcceso?: SortOrder
    _count?: AccesoCountOrderByAggregateInput
    _avg?: AccesoAvgOrderByAggregateInput
    _max?: AccesoMaxOrderByAggregateInput
    _min?: AccesoMinOrderByAggregateInput
    _sum?: AccesoSumOrderByAggregateInput
  }

  export type AccesoScalarWhereWithAggregatesInput = {
    AND?: AccesoScalarWhereWithAggregatesInput | AccesoScalarWhereWithAggregatesInput[]
    OR?: AccesoScalarWhereWithAggregatesInput[]
    NOT?: AccesoScalarWhereWithAggregatesInput | AccesoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Acceso"> | number
    usuarioId?: IntNullableWithAggregatesFilter<"Acceso"> | number | null
    ip?: StringWithAggregatesFilter<"Acceso"> | string
    fecha?: DateTimeWithAggregatesFilter<"Acceso"> | Date | string
    tipoAcceso?: EnumTipoAccesoWithAggregatesFilter<"Acceso"> | $Enums.TipoAcceso
  }

  export type UsuarioCreateInput = {
    correo: string
    contraseña: string
    rol?: $Enums.Rol
    creadoEn?: Date | string
    ultimaConexion?: Date | string | null
    activo?: boolean
    verificadoEmail?: boolean
    propietario?: PropietarioCreateNestedOneWithoutUsuarioInput
    usuarioClinicas?: UsuarioClinicaCreateNestedManyWithoutUsuarioInput
    accesos?: AccesoCreateNestedManyWithoutUsuarioInput
    verificacionesSMS?: VerificacionSMSCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    correo: string
    contraseña: string
    rol?: $Enums.Rol
    creadoEn?: Date | string
    ultimaConexion?: Date | string | null
    activo?: boolean
    verificadoEmail?: boolean
    propietarioId?: number | null
    usuarioClinicas?: UsuarioClinicaUncheckedCreateNestedManyWithoutUsuarioInput
    accesos?: AccesoUncheckedCreateNestedManyWithoutUsuarioInput
    verificacionesSMS?: VerificacionSMSUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
    propietario?: PropietarioUpdateOneWithoutUsuarioNestedInput
    usuarioClinicas?: UsuarioClinicaUpdateManyWithoutUsuarioNestedInput
    accesos?: AccesoUpdateManyWithoutUsuarioNestedInput
    verificacionesSMS?: VerificacionSMSUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
    propietarioId?: NullableIntFieldUpdateOperationsInput | number | null
    usuarioClinicas?: UsuarioClinicaUncheckedUpdateManyWithoutUsuarioNestedInput
    accesos?: AccesoUncheckedUpdateManyWithoutUsuarioNestedInput
    verificacionesSMS?: VerificacionSMSUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    correo: string
    contraseña: string
    rol?: $Enums.Rol
    creadoEn?: Date | string
    ultimaConexion?: Date | string | null
    activo?: boolean
    verificadoEmail?: boolean
    propietarioId?: number | null
  }

  export type UsuarioUpdateManyMutationInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
    propietarioId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PropietarioCreateInput = {
    nombre: string
    creadoEn?: Date | string
    telefonoPrincipal: string
    telefonoSecundario1?: string | null
    telefonoSecundario2?: string | null
    usuarioId?: number | null
    usuario?: UsuarioCreateNestedOneWithoutPropietarioInput
  }

  export type PropietarioUncheckedCreateInput = {
    id?: number
    nombre: string
    creadoEn?: Date | string
    telefonoPrincipal: string
    telefonoSecundario1?: string | null
    telefonoSecundario2?: string | null
    usuarioId?: number | null
    usuario?: UsuarioUncheckedCreateNestedOneWithoutPropietarioInput
  }

  export type PropietarioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario1?: NullableStringFieldUpdateOperationsInput | string | null
    telefonoSecundario2?: NullableStringFieldUpdateOperationsInput | string | null
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    usuario?: UsuarioUpdateOneWithoutPropietarioNestedInput
  }

  export type PropietarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario1?: NullableStringFieldUpdateOperationsInput | string | null
    telefonoSecundario2?: NullableStringFieldUpdateOperationsInput | string | null
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    usuario?: UsuarioUncheckedUpdateOneWithoutPropietarioNestedInput
  }

  export type PropietarioCreateManyInput = {
    id?: number
    nombre: string
    creadoEn?: Date | string
    telefonoPrincipal: string
    telefonoSecundario1?: string | null
    telefonoSecundario2?: string | null
    usuarioId?: number | null
  }

  export type PropietarioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario1?: NullableStringFieldUpdateOperationsInput | string | null
    telefonoSecundario2?: NullableStringFieldUpdateOperationsInput | string | null
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PropietarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario1?: NullableStringFieldUpdateOperationsInput | string | null
    telefonoSecundario2?: NullableStringFieldUpdateOperationsInput | string | null
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ClinicaCreateInput = {
    nombre: string
    direccion: string
    telefono: string
    tipo: string
    creadoEn?: Date | string
    usuarioClinicas?: UsuarioClinicaCreateNestedManyWithoutClinicaInput
  }

  export type ClinicaUncheckedCreateInput = {
    id?: number
    nombre: string
    direccion: string
    telefono: string
    tipo: string
    creadoEn?: Date | string
    usuarioClinicas?: UsuarioClinicaUncheckedCreateNestedManyWithoutClinicaInput
  }

  export type ClinicaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioClinicas?: UsuarioClinicaUpdateManyWithoutClinicaNestedInput
  }

  export type ClinicaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioClinicas?: UsuarioClinicaUncheckedUpdateManyWithoutClinicaNestedInput
  }

  export type ClinicaCreateManyInput = {
    id?: number
    nombre: string
    direccion: string
    telefono: string
    tipo: string
    creadoEn?: Date | string
  }

  export type ClinicaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificacionSMSCreateInput = {
    telefono: string
    codigo: string
    usado?: boolean
    creadoEn?: Date | string
    expiradoEn: Date | string
    intentosFallidos?: number
    usuario: UsuarioCreateNestedOneWithoutVerificacionesSMSInput
  }

  export type VerificacionSMSUncheckedCreateInput = {
    id?: number
    telefono: string
    codigo: string
    usado?: boolean
    creadoEn?: Date | string
    expiradoEn: Date | string
    usuarioId: number
    intentosFallidos?: number
  }

  export type VerificacionSMSUpdateInput = {
    telefono?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    expiradoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    intentosFallidos?: IntFieldUpdateOperationsInput | number
    usuario?: UsuarioUpdateOneRequiredWithoutVerificacionesSMSNestedInput
  }

  export type VerificacionSMSUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    telefono?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    expiradoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    intentosFallidos?: IntFieldUpdateOperationsInput | number
  }

  export type VerificacionSMSCreateManyInput = {
    id?: number
    telefono: string
    codigo: string
    usado?: boolean
    creadoEn?: Date | string
    expiradoEn: Date | string
    usuarioId: number
    intentosFallidos?: number
  }

  export type VerificacionSMSUpdateManyMutationInput = {
    telefono?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    expiradoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    intentosFallidos?: IntFieldUpdateOperationsInput | number
  }

  export type VerificacionSMSUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    telefono?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    expiradoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    intentosFallidos?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioClinicaCreateInput = {
    usuario: UsuarioCreateNestedOneWithoutUsuarioClinicasInput
    clinica: ClinicaCreateNestedOneWithoutUsuarioClinicasInput
  }

  export type UsuarioClinicaUncheckedCreateInput = {
    id?: number
    usuarioId: number
    clinicaId: number
  }

  export type UsuarioClinicaUpdateInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutUsuarioClinicasNestedInput
    clinica?: ClinicaUpdateOneRequiredWithoutUsuarioClinicasNestedInput
  }

  export type UsuarioClinicaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    clinicaId?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioClinicaCreateManyInput = {
    id?: number
    usuarioId: number
    clinicaId: number
  }

  export type UsuarioClinicaUpdateManyMutationInput = {

  }

  export type UsuarioClinicaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    clinicaId?: IntFieldUpdateOperationsInput | number
  }

  export type AccesoCreateInput = {
    ip: string
    fecha?: Date | string
    tipoAcceso: $Enums.TipoAcceso
    usuario?: UsuarioCreateNestedOneWithoutAccesosInput
  }

  export type AccesoUncheckedCreateInput = {
    id?: number
    usuarioId?: number | null
    ip: string
    fecha?: Date | string
    tipoAcceso: $Enums.TipoAcceso
  }

  export type AccesoUpdateInput = {
    ip?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAcceso?: EnumTipoAccesoFieldUpdateOperationsInput | $Enums.TipoAcceso
    usuario?: UsuarioUpdateOneWithoutAccesosNestedInput
  }

  export type AccesoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    ip?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAcceso?: EnumTipoAccesoFieldUpdateOperationsInput | $Enums.TipoAcceso
  }

  export type AccesoCreateManyInput = {
    id?: number
    usuarioId?: number | null
    ip: string
    fecha?: Date | string
    tipoAcceso: $Enums.TipoAcceso
  }

  export type AccesoUpdateManyMutationInput = {
    ip?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAcceso?: EnumTipoAccesoFieldUpdateOperationsInput | $Enums.TipoAcceso
  }

  export type AccesoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    ip?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAcceso?: EnumTipoAccesoFieldUpdateOperationsInput | $Enums.TipoAcceso
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRolFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolFilter<$PrismaModel> | $Enums.Rol
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PropietarioNullableScalarRelationFilter = {
    is?: PropietarioWhereInput | null
    isNot?: PropietarioWhereInput | null
  }

  export type UsuarioClinicaListRelationFilter = {
    every?: UsuarioClinicaWhereInput
    some?: UsuarioClinicaWhereInput
    none?: UsuarioClinicaWhereInput
  }

  export type AccesoListRelationFilter = {
    every?: AccesoWhereInput
    some?: AccesoWhereInput
    none?: AccesoWhereInput
  }

  export type VerificacionSMSListRelationFilter = {
    every?: VerificacionSMSWhereInput
    some?: VerificacionSMSWhereInput
    none?: VerificacionSMSWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UsuarioClinicaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccesoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VerificacionSMSOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    contraseña?: SortOrder
    rol?: SortOrder
    creadoEn?: SortOrder
    ultimaConexion?: SortOrder
    activo?: SortOrder
    verificadoEmail?: SortOrder
    propietarioId?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    propietarioId?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    contraseña?: SortOrder
    rol?: SortOrder
    creadoEn?: SortOrder
    ultimaConexion?: SortOrder
    activo?: SortOrder
    verificadoEmail?: SortOrder
    propietarioId?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    correo?: SortOrder
    contraseña?: SortOrder
    rol?: SortOrder
    creadoEn?: SortOrder
    ultimaConexion?: SortOrder
    activo?: SortOrder
    verificadoEmail?: SortOrder
    propietarioId?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
    propietarioId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolWithAggregatesFilter<$PrismaModel> | $Enums.Rol
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolFilter<$PrismaModel>
    _max?: NestedEnumRolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsuarioNullableScalarRelationFilter = {
    is?: UsuarioWhereInput | null
    isNot?: UsuarioWhereInput | null
  }

  export type PropietarioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    creadoEn?: SortOrder
    telefonoPrincipal?: SortOrder
    telefonoSecundario1?: SortOrder
    telefonoSecundario2?: SortOrder
    usuarioId?: SortOrder
  }

  export type PropietarioAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type PropietarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    creadoEn?: SortOrder
    telefonoPrincipal?: SortOrder
    telefonoSecundario1?: SortOrder
    telefonoSecundario2?: SortOrder
    usuarioId?: SortOrder
  }

  export type PropietarioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    creadoEn?: SortOrder
    telefonoPrincipal?: SortOrder
    telefonoSecundario1?: SortOrder
    telefonoSecundario2?: SortOrder
    usuarioId?: SortOrder
  }

  export type PropietarioSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ClinicaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    tipo?: SortOrder
    creadoEn?: SortOrder
  }

  export type ClinicaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClinicaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    tipo?: SortOrder
    creadoEn?: SortOrder
  }

  export type ClinicaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    tipo?: SortOrder
    creadoEn?: SortOrder
  }

  export type ClinicaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type VerificacionSMSCountOrderByAggregateInput = {
    id?: SortOrder
    telefono?: SortOrder
    codigo?: SortOrder
    usado?: SortOrder
    creadoEn?: SortOrder
    expiradoEn?: SortOrder
    usuarioId?: SortOrder
    intentosFallidos?: SortOrder
  }

  export type VerificacionSMSAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    intentosFallidos?: SortOrder
  }

  export type VerificacionSMSMaxOrderByAggregateInput = {
    id?: SortOrder
    telefono?: SortOrder
    codigo?: SortOrder
    usado?: SortOrder
    creadoEn?: SortOrder
    expiradoEn?: SortOrder
    usuarioId?: SortOrder
    intentosFallidos?: SortOrder
  }

  export type VerificacionSMSMinOrderByAggregateInput = {
    id?: SortOrder
    telefono?: SortOrder
    codigo?: SortOrder
    usado?: SortOrder
    creadoEn?: SortOrder
    expiradoEn?: SortOrder
    usuarioId?: SortOrder
    intentosFallidos?: SortOrder
  }

  export type VerificacionSMSSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    intentosFallidos?: SortOrder
  }

  export type ClinicaScalarRelationFilter = {
    is?: ClinicaWhereInput
    isNot?: ClinicaWhereInput
  }

  export type UsuarioClinicaUsuarioIdClinicaIdCompoundUniqueInput = {
    usuarioId: number
    clinicaId: number
  }

  export type UsuarioClinicaCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    clinicaId?: SortOrder
  }

  export type UsuarioClinicaAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    clinicaId?: SortOrder
  }

  export type UsuarioClinicaMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    clinicaId?: SortOrder
  }

  export type UsuarioClinicaMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    clinicaId?: SortOrder
  }

  export type UsuarioClinicaSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    clinicaId?: SortOrder
  }

  export type EnumTipoAccesoFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoAcceso | EnumTipoAccesoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoAcceso[] | ListEnumTipoAccesoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoAcceso[] | ListEnumTipoAccesoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoAccesoFilter<$PrismaModel> | $Enums.TipoAcceso
  }

  export type AccesoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    ip?: SortOrder
    fecha?: SortOrder
    tipoAcceso?: SortOrder
  }

  export type AccesoAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type AccesoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    ip?: SortOrder
    fecha?: SortOrder
    tipoAcceso?: SortOrder
  }

  export type AccesoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    ip?: SortOrder
    fecha?: SortOrder
    tipoAcceso?: SortOrder
  }

  export type AccesoSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type EnumTipoAccesoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoAcceso | EnumTipoAccesoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoAcceso[] | ListEnumTipoAccesoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoAcceso[] | ListEnumTipoAccesoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoAccesoWithAggregatesFilter<$PrismaModel> | $Enums.TipoAcceso
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoAccesoFilter<$PrismaModel>
    _max?: NestedEnumTipoAccesoFilter<$PrismaModel>
  }

  export type PropietarioCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<PropietarioCreateWithoutUsuarioInput, PropietarioUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: PropietarioCreateOrConnectWithoutUsuarioInput
    connect?: PropietarioWhereUniqueInput
  }

  export type UsuarioClinicaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<UsuarioClinicaCreateWithoutUsuarioInput, UsuarioClinicaUncheckedCreateWithoutUsuarioInput> | UsuarioClinicaCreateWithoutUsuarioInput[] | UsuarioClinicaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioClinicaCreateOrConnectWithoutUsuarioInput | UsuarioClinicaCreateOrConnectWithoutUsuarioInput[]
    createMany?: UsuarioClinicaCreateManyUsuarioInputEnvelope
    connect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
  }

  export type AccesoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AccesoCreateWithoutUsuarioInput, AccesoUncheckedCreateWithoutUsuarioInput> | AccesoCreateWithoutUsuarioInput[] | AccesoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AccesoCreateOrConnectWithoutUsuarioInput | AccesoCreateOrConnectWithoutUsuarioInput[]
    createMany?: AccesoCreateManyUsuarioInputEnvelope
    connect?: AccesoWhereUniqueInput | AccesoWhereUniqueInput[]
  }

  export type VerificacionSMSCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<VerificacionSMSCreateWithoutUsuarioInput, VerificacionSMSUncheckedCreateWithoutUsuarioInput> | VerificacionSMSCreateWithoutUsuarioInput[] | VerificacionSMSUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VerificacionSMSCreateOrConnectWithoutUsuarioInput | VerificacionSMSCreateOrConnectWithoutUsuarioInput[]
    createMany?: VerificacionSMSCreateManyUsuarioInputEnvelope
    connect?: VerificacionSMSWhereUniqueInput | VerificacionSMSWhereUniqueInput[]
  }

  export type UsuarioClinicaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<UsuarioClinicaCreateWithoutUsuarioInput, UsuarioClinicaUncheckedCreateWithoutUsuarioInput> | UsuarioClinicaCreateWithoutUsuarioInput[] | UsuarioClinicaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioClinicaCreateOrConnectWithoutUsuarioInput | UsuarioClinicaCreateOrConnectWithoutUsuarioInput[]
    createMany?: UsuarioClinicaCreateManyUsuarioInputEnvelope
    connect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
  }

  export type AccesoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<AccesoCreateWithoutUsuarioInput, AccesoUncheckedCreateWithoutUsuarioInput> | AccesoCreateWithoutUsuarioInput[] | AccesoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AccesoCreateOrConnectWithoutUsuarioInput | AccesoCreateOrConnectWithoutUsuarioInput[]
    createMany?: AccesoCreateManyUsuarioInputEnvelope
    connect?: AccesoWhereUniqueInput | AccesoWhereUniqueInput[]
  }

  export type VerificacionSMSUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<VerificacionSMSCreateWithoutUsuarioInput, VerificacionSMSUncheckedCreateWithoutUsuarioInput> | VerificacionSMSCreateWithoutUsuarioInput[] | VerificacionSMSUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VerificacionSMSCreateOrConnectWithoutUsuarioInput | VerificacionSMSCreateOrConnectWithoutUsuarioInput[]
    createMany?: VerificacionSMSCreateManyUsuarioInputEnvelope
    connect?: VerificacionSMSWhereUniqueInput | VerificacionSMSWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRolFieldUpdateOperationsInput = {
    set?: $Enums.Rol
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PropietarioUpdateOneWithoutUsuarioNestedInput = {
    create?: XOR<PropietarioCreateWithoutUsuarioInput, PropietarioUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: PropietarioCreateOrConnectWithoutUsuarioInput
    upsert?: PropietarioUpsertWithoutUsuarioInput
    disconnect?: PropietarioWhereInput | boolean
    delete?: PropietarioWhereInput | boolean
    connect?: PropietarioWhereUniqueInput
    update?: XOR<XOR<PropietarioUpdateToOneWithWhereWithoutUsuarioInput, PropietarioUpdateWithoutUsuarioInput>, PropietarioUncheckedUpdateWithoutUsuarioInput>
  }

  export type UsuarioClinicaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<UsuarioClinicaCreateWithoutUsuarioInput, UsuarioClinicaUncheckedCreateWithoutUsuarioInput> | UsuarioClinicaCreateWithoutUsuarioInput[] | UsuarioClinicaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioClinicaCreateOrConnectWithoutUsuarioInput | UsuarioClinicaCreateOrConnectWithoutUsuarioInput[]
    upsert?: UsuarioClinicaUpsertWithWhereUniqueWithoutUsuarioInput | UsuarioClinicaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: UsuarioClinicaCreateManyUsuarioInputEnvelope
    set?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    disconnect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    delete?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    connect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    update?: UsuarioClinicaUpdateWithWhereUniqueWithoutUsuarioInput | UsuarioClinicaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: UsuarioClinicaUpdateManyWithWhereWithoutUsuarioInput | UsuarioClinicaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: UsuarioClinicaScalarWhereInput | UsuarioClinicaScalarWhereInput[]
  }

  export type AccesoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AccesoCreateWithoutUsuarioInput, AccesoUncheckedCreateWithoutUsuarioInput> | AccesoCreateWithoutUsuarioInput[] | AccesoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AccesoCreateOrConnectWithoutUsuarioInput | AccesoCreateOrConnectWithoutUsuarioInput[]
    upsert?: AccesoUpsertWithWhereUniqueWithoutUsuarioInput | AccesoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AccesoCreateManyUsuarioInputEnvelope
    set?: AccesoWhereUniqueInput | AccesoWhereUniqueInput[]
    disconnect?: AccesoWhereUniqueInput | AccesoWhereUniqueInput[]
    delete?: AccesoWhereUniqueInput | AccesoWhereUniqueInput[]
    connect?: AccesoWhereUniqueInput | AccesoWhereUniqueInput[]
    update?: AccesoUpdateWithWhereUniqueWithoutUsuarioInput | AccesoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AccesoUpdateManyWithWhereWithoutUsuarioInput | AccesoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AccesoScalarWhereInput | AccesoScalarWhereInput[]
  }

  export type VerificacionSMSUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<VerificacionSMSCreateWithoutUsuarioInput, VerificacionSMSUncheckedCreateWithoutUsuarioInput> | VerificacionSMSCreateWithoutUsuarioInput[] | VerificacionSMSUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VerificacionSMSCreateOrConnectWithoutUsuarioInput | VerificacionSMSCreateOrConnectWithoutUsuarioInput[]
    upsert?: VerificacionSMSUpsertWithWhereUniqueWithoutUsuarioInput | VerificacionSMSUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: VerificacionSMSCreateManyUsuarioInputEnvelope
    set?: VerificacionSMSWhereUniqueInput | VerificacionSMSWhereUniqueInput[]
    disconnect?: VerificacionSMSWhereUniqueInput | VerificacionSMSWhereUniqueInput[]
    delete?: VerificacionSMSWhereUniqueInput | VerificacionSMSWhereUniqueInput[]
    connect?: VerificacionSMSWhereUniqueInput | VerificacionSMSWhereUniqueInput[]
    update?: VerificacionSMSUpdateWithWhereUniqueWithoutUsuarioInput | VerificacionSMSUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: VerificacionSMSUpdateManyWithWhereWithoutUsuarioInput | VerificacionSMSUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: VerificacionSMSScalarWhereInput | VerificacionSMSScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsuarioClinicaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<UsuarioClinicaCreateWithoutUsuarioInput, UsuarioClinicaUncheckedCreateWithoutUsuarioInput> | UsuarioClinicaCreateWithoutUsuarioInput[] | UsuarioClinicaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: UsuarioClinicaCreateOrConnectWithoutUsuarioInput | UsuarioClinicaCreateOrConnectWithoutUsuarioInput[]
    upsert?: UsuarioClinicaUpsertWithWhereUniqueWithoutUsuarioInput | UsuarioClinicaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: UsuarioClinicaCreateManyUsuarioInputEnvelope
    set?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    disconnect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    delete?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    connect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    update?: UsuarioClinicaUpdateWithWhereUniqueWithoutUsuarioInput | UsuarioClinicaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: UsuarioClinicaUpdateManyWithWhereWithoutUsuarioInput | UsuarioClinicaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: UsuarioClinicaScalarWhereInput | UsuarioClinicaScalarWhereInput[]
  }

  export type AccesoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<AccesoCreateWithoutUsuarioInput, AccesoUncheckedCreateWithoutUsuarioInput> | AccesoCreateWithoutUsuarioInput[] | AccesoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: AccesoCreateOrConnectWithoutUsuarioInput | AccesoCreateOrConnectWithoutUsuarioInput[]
    upsert?: AccesoUpsertWithWhereUniqueWithoutUsuarioInput | AccesoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: AccesoCreateManyUsuarioInputEnvelope
    set?: AccesoWhereUniqueInput | AccesoWhereUniqueInput[]
    disconnect?: AccesoWhereUniqueInput | AccesoWhereUniqueInput[]
    delete?: AccesoWhereUniqueInput | AccesoWhereUniqueInput[]
    connect?: AccesoWhereUniqueInput | AccesoWhereUniqueInput[]
    update?: AccesoUpdateWithWhereUniqueWithoutUsuarioInput | AccesoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: AccesoUpdateManyWithWhereWithoutUsuarioInput | AccesoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: AccesoScalarWhereInput | AccesoScalarWhereInput[]
  }

  export type VerificacionSMSUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<VerificacionSMSCreateWithoutUsuarioInput, VerificacionSMSUncheckedCreateWithoutUsuarioInput> | VerificacionSMSCreateWithoutUsuarioInput[] | VerificacionSMSUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: VerificacionSMSCreateOrConnectWithoutUsuarioInput | VerificacionSMSCreateOrConnectWithoutUsuarioInput[]
    upsert?: VerificacionSMSUpsertWithWhereUniqueWithoutUsuarioInput | VerificacionSMSUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: VerificacionSMSCreateManyUsuarioInputEnvelope
    set?: VerificacionSMSWhereUniqueInput | VerificacionSMSWhereUniqueInput[]
    disconnect?: VerificacionSMSWhereUniqueInput | VerificacionSMSWhereUniqueInput[]
    delete?: VerificacionSMSWhereUniqueInput | VerificacionSMSWhereUniqueInput[]
    connect?: VerificacionSMSWhereUniqueInput | VerificacionSMSWhereUniqueInput[]
    update?: VerificacionSMSUpdateWithWhereUniqueWithoutUsuarioInput | VerificacionSMSUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: VerificacionSMSUpdateManyWithWhereWithoutUsuarioInput | VerificacionSMSUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: VerificacionSMSScalarWhereInput | VerificacionSMSScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutPropietarioInput = {
    create?: XOR<UsuarioCreateWithoutPropietarioInput, UsuarioUncheckedCreateWithoutPropietarioInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutPropietarioInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUncheckedCreateNestedOneWithoutPropietarioInput = {
    create?: XOR<UsuarioCreateWithoutPropietarioInput, UsuarioUncheckedCreateWithoutPropietarioInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutPropietarioInput
    connect?: UsuarioWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UsuarioUpdateOneWithoutPropietarioNestedInput = {
    create?: XOR<UsuarioCreateWithoutPropietarioInput, UsuarioUncheckedCreateWithoutPropietarioInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutPropietarioInput
    upsert?: UsuarioUpsertWithoutPropietarioInput
    disconnect?: UsuarioWhereInput | boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutPropietarioInput, UsuarioUpdateWithoutPropietarioInput>, UsuarioUncheckedUpdateWithoutPropietarioInput>
  }

  export type UsuarioUncheckedUpdateOneWithoutPropietarioNestedInput = {
    create?: XOR<UsuarioCreateWithoutPropietarioInput, UsuarioUncheckedCreateWithoutPropietarioInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutPropietarioInput
    upsert?: UsuarioUpsertWithoutPropietarioInput
    disconnect?: UsuarioWhereInput | boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutPropietarioInput, UsuarioUpdateWithoutPropietarioInput>, UsuarioUncheckedUpdateWithoutPropietarioInput>
  }

  export type UsuarioClinicaCreateNestedManyWithoutClinicaInput = {
    create?: XOR<UsuarioClinicaCreateWithoutClinicaInput, UsuarioClinicaUncheckedCreateWithoutClinicaInput> | UsuarioClinicaCreateWithoutClinicaInput[] | UsuarioClinicaUncheckedCreateWithoutClinicaInput[]
    connectOrCreate?: UsuarioClinicaCreateOrConnectWithoutClinicaInput | UsuarioClinicaCreateOrConnectWithoutClinicaInput[]
    createMany?: UsuarioClinicaCreateManyClinicaInputEnvelope
    connect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
  }

  export type UsuarioClinicaUncheckedCreateNestedManyWithoutClinicaInput = {
    create?: XOR<UsuarioClinicaCreateWithoutClinicaInput, UsuarioClinicaUncheckedCreateWithoutClinicaInput> | UsuarioClinicaCreateWithoutClinicaInput[] | UsuarioClinicaUncheckedCreateWithoutClinicaInput[]
    connectOrCreate?: UsuarioClinicaCreateOrConnectWithoutClinicaInput | UsuarioClinicaCreateOrConnectWithoutClinicaInput[]
    createMany?: UsuarioClinicaCreateManyClinicaInputEnvelope
    connect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
  }

  export type UsuarioClinicaUpdateManyWithoutClinicaNestedInput = {
    create?: XOR<UsuarioClinicaCreateWithoutClinicaInput, UsuarioClinicaUncheckedCreateWithoutClinicaInput> | UsuarioClinicaCreateWithoutClinicaInput[] | UsuarioClinicaUncheckedCreateWithoutClinicaInput[]
    connectOrCreate?: UsuarioClinicaCreateOrConnectWithoutClinicaInput | UsuarioClinicaCreateOrConnectWithoutClinicaInput[]
    upsert?: UsuarioClinicaUpsertWithWhereUniqueWithoutClinicaInput | UsuarioClinicaUpsertWithWhereUniqueWithoutClinicaInput[]
    createMany?: UsuarioClinicaCreateManyClinicaInputEnvelope
    set?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    disconnect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    delete?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    connect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    update?: UsuarioClinicaUpdateWithWhereUniqueWithoutClinicaInput | UsuarioClinicaUpdateWithWhereUniqueWithoutClinicaInput[]
    updateMany?: UsuarioClinicaUpdateManyWithWhereWithoutClinicaInput | UsuarioClinicaUpdateManyWithWhereWithoutClinicaInput[]
    deleteMany?: UsuarioClinicaScalarWhereInput | UsuarioClinicaScalarWhereInput[]
  }

  export type UsuarioClinicaUncheckedUpdateManyWithoutClinicaNestedInput = {
    create?: XOR<UsuarioClinicaCreateWithoutClinicaInput, UsuarioClinicaUncheckedCreateWithoutClinicaInput> | UsuarioClinicaCreateWithoutClinicaInput[] | UsuarioClinicaUncheckedCreateWithoutClinicaInput[]
    connectOrCreate?: UsuarioClinicaCreateOrConnectWithoutClinicaInput | UsuarioClinicaCreateOrConnectWithoutClinicaInput[]
    upsert?: UsuarioClinicaUpsertWithWhereUniqueWithoutClinicaInput | UsuarioClinicaUpsertWithWhereUniqueWithoutClinicaInput[]
    createMany?: UsuarioClinicaCreateManyClinicaInputEnvelope
    set?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    disconnect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    delete?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    connect?: UsuarioClinicaWhereUniqueInput | UsuarioClinicaWhereUniqueInput[]
    update?: UsuarioClinicaUpdateWithWhereUniqueWithoutClinicaInput | UsuarioClinicaUpdateWithWhereUniqueWithoutClinicaInput[]
    updateMany?: UsuarioClinicaUpdateManyWithWhereWithoutClinicaInput | UsuarioClinicaUpdateManyWithWhereWithoutClinicaInput[]
    deleteMany?: UsuarioClinicaScalarWhereInput | UsuarioClinicaScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutVerificacionesSMSInput = {
    create?: XOR<UsuarioCreateWithoutVerificacionesSMSInput, UsuarioUncheckedCreateWithoutVerificacionesSMSInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutVerificacionesSMSInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutVerificacionesSMSNestedInput = {
    create?: XOR<UsuarioCreateWithoutVerificacionesSMSInput, UsuarioUncheckedCreateWithoutVerificacionesSMSInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutVerificacionesSMSInput
    upsert?: UsuarioUpsertWithoutVerificacionesSMSInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutVerificacionesSMSInput, UsuarioUpdateWithoutVerificacionesSMSInput>, UsuarioUncheckedUpdateWithoutVerificacionesSMSInput>
  }

  export type UsuarioCreateNestedOneWithoutUsuarioClinicasInput = {
    create?: XOR<UsuarioCreateWithoutUsuarioClinicasInput, UsuarioUncheckedCreateWithoutUsuarioClinicasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutUsuarioClinicasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ClinicaCreateNestedOneWithoutUsuarioClinicasInput = {
    create?: XOR<ClinicaCreateWithoutUsuarioClinicasInput, ClinicaUncheckedCreateWithoutUsuarioClinicasInput>
    connectOrCreate?: ClinicaCreateOrConnectWithoutUsuarioClinicasInput
    connect?: ClinicaWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutUsuarioClinicasNestedInput = {
    create?: XOR<UsuarioCreateWithoutUsuarioClinicasInput, UsuarioUncheckedCreateWithoutUsuarioClinicasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutUsuarioClinicasInput
    upsert?: UsuarioUpsertWithoutUsuarioClinicasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutUsuarioClinicasInput, UsuarioUpdateWithoutUsuarioClinicasInput>, UsuarioUncheckedUpdateWithoutUsuarioClinicasInput>
  }

  export type ClinicaUpdateOneRequiredWithoutUsuarioClinicasNestedInput = {
    create?: XOR<ClinicaCreateWithoutUsuarioClinicasInput, ClinicaUncheckedCreateWithoutUsuarioClinicasInput>
    connectOrCreate?: ClinicaCreateOrConnectWithoutUsuarioClinicasInput
    upsert?: ClinicaUpsertWithoutUsuarioClinicasInput
    connect?: ClinicaWhereUniqueInput
    update?: XOR<XOR<ClinicaUpdateToOneWithWhereWithoutUsuarioClinicasInput, ClinicaUpdateWithoutUsuarioClinicasInput>, ClinicaUncheckedUpdateWithoutUsuarioClinicasInput>
  }

  export type UsuarioCreateNestedOneWithoutAccesosInput = {
    create?: XOR<UsuarioCreateWithoutAccesosInput, UsuarioUncheckedCreateWithoutAccesosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAccesosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type EnumTipoAccesoFieldUpdateOperationsInput = {
    set?: $Enums.TipoAcceso
  }

  export type UsuarioUpdateOneWithoutAccesosNestedInput = {
    create?: XOR<UsuarioCreateWithoutAccesosInput, UsuarioUncheckedCreateWithoutAccesosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutAccesosInput
    upsert?: UsuarioUpsertWithoutAccesosInput
    disconnect?: UsuarioWhereInput | boolean
    delete?: UsuarioWhereInput | boolean
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutAccesosInput, UsuarioUpdateWithoutAccesosInput>, UsuarioUncheckedUpdateWithoutAccesosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRolFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolFilter<$PrismaModel> | $Enums.Rol
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Rol | EnumRolFieldRefInput<$PrismaModel>
    in?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    notIn?: $Enums.Rol[] | ListEnumRolFieldRefInput<$PrismaModel>
    not?: NestedEnumRolWithAggregatesFilter<$PrismaModel> | $Enums.Rol
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolFilter<$PrismaModel>
    _max?: NestedEnumRolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumTipoAccesoFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoAcceso | EnumTipoAccesoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoAcceso[] | ListEnumTipoAccesoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoAcceso[] | ListEnumTipoAccesoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoAccesoFilter<$PrismaModel> | $Enums.TipoAcceso
  }

  export type NestedEnumTipoAccesoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoAcceso | EnumTipoAccesoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoAcceso[] | ListEnumTipoAccesoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoAcceso[] | ListEnumTipoAccesoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoAccesoWithAggregatesFilter<$PrismaModel> | $Enums.TipoAcceso
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoAccesoFilter<$PrismaModel>
    _max?: NestedEnumTipoAccesoFilter<$PrismaModel>
  }

  export type PropietarioCreateWithoutUsuarioInput = {
    nombre: string
    creadoEn?: Date | string
    telefonoPrincipal: string
    telefonoSecundario1?: string | null
    telefonoSecundario2?: string | null
    usuarioId?: number | null
  }

  export type PropietarioUncheckedCreateWithoutUsuarioInput = {
    id?: number
    nombre: string
    creadoEn?: Date | string
    telefonoPrincipal: string
    telefonoSecundario1?: string | null
    telefonoSecundario2?: string | null
    usuarioId?: number | null
  }

  export type PropietarioCreateOrConnectWithoutUsuarioInput = {
    where: PropietarioWhereUniqueInput
    create: XOR<PropietarioCreateWithoutUsuarioInput, PropietarioUncheckedCreateWithoutUsuarioInput>
  }

  export type UsuarioClinicaCreateWithoutUsuarioInput = {
    clinica: ClinicaCreateNestedOneWithoutUsuarioClinicasInput
  }

  export type UsuarioClinicaUncheckedCreateWithoutUsuarioInput = {
    id?: number
    clinicaId: number
  }

  export type UsuarioClinicaCreateOrConnectWithoutUsuarioInput = {
    where: UsuarioClinicaWhereUniqueInput
    create: XOR<UsuarioClinicaCreateWithoutUsuarioInput, UsuarioClinicaUncheckedCreateWithoutUsuarioInput>
  }

  export type UsuarioClinicaCreateManyUsuarioInputEnvelope = {
    data: UsuarioClinicaCreateManyUsuarioInput | UsuarioClinicaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type AccesoCreateWithoutUsuarioInput = {
    ip: string
    fecha?: Date | string
    tipoAcceso: $Enums.TipoAcceso
  }

  export type AccesoUncheckedCreateWithoutUsuarioInput = {
    id?: number
    ip: string
    fecha?: Date | string
    tipoAcceso: $Enums.TipoAcceso
  }

  export type AccesoCreateOrConnectWithoutUsuarioInput = {
    where: AccesoWhereUniqueInput
    create: XOR<AccesoCreateWithoutUsuarioInput, AccesoUncheckedCreateWithoutUsuarioInput>
  }

  export type AccesoCreateManyUsuarioInputEnvelope = {
    data: AccesoCreateManyUsuarioInput | AccesoCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type VerificacionSMSCreateWithoutUsuarioInput = {
    telefono: string
    codigo: string
    usado?: boolean
    creadoEn?: Date | string
    expiradoEn: Date | string
    intentosFallidos?: number
  }

  export type VerificacionSMSUncheckedCreateWithoutUsuarioInput = {
    id?: number
    telefono: string
    codigo: string
    usado?: boolean
    creadoEn?: Date | string
    expiradoEn: Date | string
    intentosFallidos?: number
  }

  export type VerificacionSMSCreateOrConnectWithoutUsuarioInput = {
    where: VerificacionSMSWhereUniqueInput
    create: XOR<VerificacionSMSCreateWithoutUsuarioInput, VerificacionSMSUncheckedCreateWithoutUsuarioInput>
  }

  export type VerificacionSMSCreateManyUsuarioInputEnvelope = {
    data: VerificacionSMSCreateManyUsuarioInput | VerificacionSMSCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type PropietarioUpsertWithoutUsuarioInput = {
    update: XOR<PropietarioUpdateWithoutUsuarioInput, PropietarioUncheckedUpdateWithoutUsuarioInput>
    create: XOR<PropietarioCreateWithoutUsuarioInput, PropietarioUncheckedCreateWithoutUsuarioInput>
    where?: PropietarioWhereInput
  }

  export type PropietarioUpdateToOneWithWhereWithoutUsuarioInput = {
    where?: PropietarioWhereInput
    data: XOR<PropietarioUpdateWithoutUsuarioInput, PropietarioUncheckedUpdateWithoutUsuarioInput>
  }

  export type PropietarioUpdateWithoutUsuarioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario1?: NullableStringFieldUpdateOperationsInput | string | null
    telefonoSecundario2?: NullableStringFieldUpdateOperationsInput | string | null
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PropietarioUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    telefonoPrincipal?: StringFieldUpdateOperationsInput | string
    telefonoSecundario1?: NullableStringFieldUpdateOperationsInput | string | null
    telefonoSecundario2?: NullableStringFieldUpdateOperationsInput | string | null
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsuarioClinicaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: UsuarioClinicaWhereUniqueInput
    update: XOR<UsuarioClinicaUpdateWithoutUsuarioInput, UsuarioClinicaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<UsuarioClinicaCreateWithoutUsuarioInput, UsuarioClinicaUncheckedCreateWithoutUsuarioInput>
  }

  export type UsuarioClinicaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: UsuarioClinicaWhereUniqueInput
    data: XOR<UsuarioClinicaUpdateWithoutUsuarioInput, UsuarioClinicaUncheckedUpdateWithoutUsuarioInput>
  }

  export type UsuarioClinicaUpdateManyWithWhereWithoutUsuarioInput = {
    where: UsuarioClinicaScalarWhereInput
    data: XOR<UsuarioClinicaUpdateManyMutationInput, UsuarioClinicaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type UsuarioClinicaScalarWhereInput = {
    AND?: UsuarioClinicaScalarWhereInput | UsuarioClinicaScalarWhereInput[]
    OR?: UsuarioClinicaScalarWhereInput[]
    NOT?: UsuarioClinicaScalarWhereInput | UsuarioClinicaScalarWhereInput[]
    id?: IntFilter<"UsuarioClinica"> | number
    usuarioId?: IntFilter<"UsuarioClinica"> | number
    clinicaId?: IntFilter<"UsuarioClinica"> | number
  }

  export type AccesoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: AccesoWhereUniqueInput
    update: XOR<AccesoUpdateWithoutUsuarioInput, AccesoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<AccesoCreateWithoutUsuarioInput, AccesoUncheckedCreateWithoutUsuarioInput>
  }

  export type AccesoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: AccesoWhereUniqueInput
    data: XOR<AccesoUpdateWithoutUsuarioInput, AccesoUncheckedUpdateWithoutUsuarioInput>
  }

  export type AccesoUpdateManyWithWhereWithoutUsuarioInput = {
    where: AccesoScalarWhereInput
    data: XOR<AccesoUpdateManyMutationInput, AccesoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type AccesoScalarWhereInput = {
    AND?: AccesoScalarWhereInput | AccesoScalarWhereInput[]
    OR?: AccesoScalarWhereInput[]
    NOT?: AccesoScalarWhereInput | AccesoScalarWhereInput[]
    id?: IntFilter<"Acceso"> | number
    usuarioId?: IntNullableFilter<"Acceso"> | number | null
    ip?: StringFilter<"Acceso"> | string
    fecha?: DateTimeFilter<"Acceso"> | Date | string
    tipoAcceso?: EnumTipoAccesoFilter<"Acceso"> | $Enums.TipoAcceso
  }

  export type VerificacionSMSUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: VerificacionSMSWhereUniqueInput
    update: XOR<VerificacionSMSUpdateWithoutUsuarioInput, VerificacionSMSUncheckedUpdateWithoutUsuarioInput>
    create: XOR<VerificacionSMSCreateWithoutUsuarioInput, VerificacionSMSUncheckedCreateWithoutUsuarioInput>
  }

  export type VerificacionSMSUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: VerificacionSMSWhereUniqueInput
    data: XOR<VerificacionSMSUpdateWithoutUsuarioInput, VerificacionSMSUncheckedUpdateWithoutUsuarioInput>
  }

  export type VerificacionSMSUpdateManyWithWhereWithoutUsuarioInput = {
    where: VerificacionSMSScalarWhereInput
    data: XOR<VerificacionSMSUpdateManyMutationInput, VerificacionSMSUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type VerificacionSMSScalarWhereInput = {
    AND?: VerificacionSMSScalarWhereInput | VerificacionSMSScalarWhereInput[]
    OR?: VerificacionSMSScalarWhereInput[]
    NOT?: VerificacionSMSScalarWhereInput | VerificacionSMSScalarWhereInput[]
    id?: IntFilter<"VerificacionSMS"> | number
    telefono?: StringFilter<"VerificacionSMS"> | string
    codigo?: StringFilter<"VerificacionSMS"> | string
    usado?: BoolFilter<"VerificacionSMS"> | boolean
    creadoEn?: DateTimeFilter<"VerificacionSMS"> | Date | string
    expiradoEn?: DateTimeFilter<"VerificacionSMS"> | Date | string
    usuarioId?: IntFilter<"VerificacionSMS"> | number
    intentosFallidos?: IntFilter<"VerificacionSMS"> | number
  }

  export type UsuarioCreateWithoutPropietarioInput = {
    correo: string
    contraseña: string
    rol?: $Enums.Rol
    creadoEn?: Date | string
    ultimaConexion?: Date | string | null
    activo?: boolean
    verificadoEmail?: boolean
    usuarioClinicas?: UsuarioClinicaCreateNestedManyWithoutUsuarioInput
    accesos?: AccesoCreateNestedManyWithoutUsuarioInput
    verificacionesSMS?: VerificacionSMSCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutPropietarioInput = {
    id?: number
    correo: string
    contraseña: string
    rol?: $Enums.Rol
    creadoEn?: Date | string
    ultimaConexion?: Date | string | null
    activo?: boolean
    verificadoEmail?: boolean
    usuarioClinicas?: UsuarioClinicaUncheckedCreateNestedManyWithoutUsuarioInput
    accesos?: AccesoUncheckedCreateNestedManyWithoutUsuarioInput
    verificacionesSMS?: VerificacionSMSUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutPropietarioInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutPropietarioInput, UsuarioUncheckedCreateWithoutPropietarioInput>
  }

  export type UsuarioUpsertWithoutPropietarioInput = {
    update: XOR<UsuarioUpdateWithoutPropietarioInput, UsuarioUncheckedUpdateWithoutPropietarioInput>
    create: XOR<UsuarioCreateWithoutPropietarioInput, UsuarioUncheckedCreateWithoutPropietarioInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutPropietarioInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutPropietarioInput, UsuarioUncheckedUpdateWithoutPropietarioInput>
  }

  export type UsuarioUpdateWithoutPropietarioInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
    usuarioClinicas?: UsuarioClinicaUpdateManyWithoutUsuarioNestedInput
    accesos?: AccesoUpdateManyWithoutUsuarioNestedInput
    verificacionesSMS?: VerificacionSMSUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutPropietarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
    usuarioClinicas?: UsuarioClinicaUncheckedUpdateManyWithoutUsuarioNestedInput
    accesos?: AccesoUncheckedUpdateManyWithoutUsuarioNestedInput
    verificacionesSMS?: VerificacionSMSUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioClinicaCreateWithoutClinicaInput = {
    usuario: UsuarioCreateNestedOneWithoutUsuarioClinicasInput
  }

  export type UsuarioClinicaUncheckedCreateWithoutClinicaInput = {
    id?: number
    usuarioId: number
  }

  export type UsuarioClinicaCreateOrConnectWithoutClinicaInput = {
    where: UsuarioClinicaWhereUniqueInput
    create: XOR<UsuarioClinicaCreateWithoutClinicaInput, UsuarioClinicaUncheckedCreateWithoutClinicaInput>
  }

  export type UsuarioClinicaCreateManyClinicaInputEnvelope = {
    data: UsuarioClinicaCreateManyClinicaInput | UsuarioClinicaCreateManyClinicaInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioClinicaUpsertWithWhereUniqueWithoutClinicaInput = {
    where: UsuarioClinicaWhereUniqueInput
    update: XOR<UsuarioClinicaUpdateWithoutClinicaInput, UsuarioClinicaUncheckedUpdateWithoutClinicaInput>
    create: XOR<UsuarioClinicaCreateWithoutClinicaInput, UsuarioClinicaUncheckedCreateWithoutClinicaInput>
  }

  export type UsuarioClinicaUpdateWithWhereUniqueWithoutClinicaInput = {
    where: UsuarioClinicaWhereUniqueInput
    data: XOR<UsuarioClinicaUpdateWithoutClinicaInput, UsuarioClinicaUncheckedUpdateWithoutClinicaInput>
  }

  export type UsuarioClinicaUpdateManyWithWhereWithoutClinicaInput = {
    where: UsuarioClinicaScalarWhereInput
    data: XOR<UsuarioClinicaUpdateManyMutationInput, UsuarioClinicaUncheckedUpdateManyWithoutClinicaInput>
  }

  export type UsuarioCreateWithoutVerificacionesSMSInput = {
    correo: string
    contraseña: string
    rol?: $Enums.Rol
    creadoEn?: Date | string
    ultimaConexion?: Date | string | null
    activo?: boolean
    verificadoEmail?: boolean
    propietario?: PropietarioCreateNestedOneWithoutUsuarioInput
    usuarioClinicas?: UsuarioClinicaCreateNestedManyWithoutUsuarioInput
    accesos?: AccesoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutVerificacionesSMSInput = {
    id?: number
    correo: string
    contraseña: string
    rol?: $Enums.Rol
    creadoEn?: Date | string
    ultimaConexion?: Date | string | null
    activo?: boolean
    verificadoEmail?: boolean
    propietarioId?: number | null
    usuarioClinicas?: UsuarioClinicaUncheckedCreateNestedManyWithoutUsuarioInput
    accesos?: AccesoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutVerificacionesSMSInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutVerificacionesSMSInput, UsuarioUncheckedCreateWithoutVerificacionesSMSInput>
  }

  export type UsuarioUpsertWithoutVerificacionesSMSInput = {
    update: XOR<UsuarioUpdateWithoutVerificacionesSMSInput, UsuarioUncheckedUpdateWithoutVerificacionesSMSInput>
    create: XOR<UsuarioCreateWithoutVerificacionesSMSInput, UsuarioUncheckedCreateWithoutVerificacionesSMSInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutVerificacionesSMSInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutVerificacionesSMSInput, UsuarioUncheckedUpdateWithoutVerificacionesSMSInput>
  }

  export type UsuarioUpdateWithoutVerificacionesSMSInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
    propietario?: PropietarioUpdateOneWithoutUsuarioNestedInput
    usuarioClinicas?: UsuarioClinicaUpdateManyWithoutUsuarioNestedInput
    accesos?: AccesoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutVerificacionesSMSInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
    propietarioId?: NullableIntFieldUpdateOperationsInput | number | null
    usuarioClinicas?: UsuarioClinicaUncheckedUpdateManyWithoutUsuarioNestedInput
    accesos?: AccesoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutUsuarioClinicasInput = {
    correo: string
    contraseña: string
    rol?: $Enums.Rol
    creadoEn?: Date | string
    ultimaConexion?: Date | string | null
    activo?: boolean
    verificadoEmail?: boolean
    propietario?: PropietarioCreateNestedOneWithoutUsuarioInput
    accesos?: AccesoCreateNestedManyWithoutUsuarioInput
    verificacionesSMS?: VerificacionSMSCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutUsuarioClinicasInput = {
    id?: number
    correo: string
    contraseña: string
    rol?: $Enums.Rol
    creadoEn?: Date | string
    ultimaConexion?: Date | string | null
    activo?: boolean
    verificadoEmail?: boolean
    propietarioId?: number | null
    accesos?: AccesoUncheckedCreateNestedManyWithoutUsuarioInput
    verificacionesSMS?: VerificacionSMSUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutUsuarioClinicasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutUsuarioClinicasInput, UsuarioUncheckedCreateWithoutUsuarioClinicasInput>
  }

  export type ClinicaCreateWithoutUsuarioClinicasInput = {
    nombre: string
    direccion: string
    telefono: string
    tipo: string
    creadoEn?: Date | string
  }

  export type ClinicaUncheckedCreateWithoutUsuarioClinicasInput = {
    id?: number
    nombre: string
    direccion: string
    telefono: string
    tipo: string
    creadoEn?: Date | string
  }

  export type ClinicaCreateOrConnectWithoutUsuarioClinicasInput = {
    where: ClinicaWhereUniqueInput
    create: XOR<ClinicaCreateWithoutUsuarioClinicasInput, ClinicaUncheckedCreateWithoutUsuarioClinicasInput>
  }

  export type UsuarioUpsertWithoutUsuarioClinicasInput = {
    update: XOR<UsuarioUpdateWithoutUsuarioClinicasInput, UsuarioUncheckedUpdateWithoutUsuarioClinicasInput>
    create: XOR<UsuarioCreateWithoutUsuarioClinicasInput, UsuarioUncheckedCreateWithoutUsuarioClinicasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutUsuarioClinicasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutUsuarioClinicasInput, UsuarioUncheckedUpdateWithoutUsuarioClinicasInput>
  }

  export type UsuarioUpdateWithoutUsuarioClinicasInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
    propietario?: PropietarioUpdateOneWithoutUsuarioNestedInput
    accesos?: AccesoUpdateManyWithoutUsuarioNestedInput
    verificacionesSMS?: VerificacionSMSUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutUsuarioClinicasInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
    propietarioId?: NullableIntFieldUpdateOperationsInput | number | null
    accesos?: AccesoUncheckedUpdateManyWithoutUsuarioNestedInput
    verificacionesSMS?: VerificacionSMSUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ClinicaUpsertWithoutUsuarioClinicasInput = {
    update: XOR<ClinicaUpdateWithoutUsuarioClinicasInput, ClinicaUncheckedUpdateWithoutUsuarioClinicasInput>
    create: XOR<ClinicaCreateWithoutUsuarioClinicasInput, ClinicaUncheckedCreateWithoutUsuarioClinicasInput>
    where?: ClinicaWhereInput
  }

  export type ClinicaUpdateToOneWithWhereWithoutUsuarioClinicasInput = {
    where?: ClinicaWhereInput
    data: XOR<ClinicaUpdateWithoutUsuarioClinicasInput, ClinicaUncheckedUpdateWithoutUsuarioClinicasInput>
  }

  export type ClinicaUpdateWithoutUsuarioClinicasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicaUncheckedUpdateWithoutUsuarioClinicasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioCreateWithoutAccesosInput = {
    correo: string
    contraseña: string
    rol?: $Enums.Rol
    creadoEn?: Date | string
    ultimaConexion?: Date | string | null
    activo?: boolean
    verificadoEmail?: boolean
    propietario?: PropietarioCreateNestedOneWithoutUsuarioInput
    usuarioClinicas?: UsuarioClinicaCreateNestedManyWithoutUsuarioInput
    verificacionesSMS?: VerificacionSMSCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutAccesosInput = {
    id?: number
    correo: string
    contraseña: string
    rol?: $Enums.Rol
    creadoEn?: Date | string
    ultimaConexion?: Date | string | null
    activo?: boolean
    verificadoEmail?: boolean
    propietarioId?: number | null
    usuarioClinicas?: UsuarioClinicaUncheckedCreateNestedManyWithoutUsuarioInput
    verificacionesSMS?: VerificacionSMSUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutAccesosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutAccesosInput, UsuarioUncheckedCreateWithoutAccesosInput>
  }

  export type UsuarioUpsertWithoutAccesosInput = {
    update: XOR<UsuarioUpdateWithoutAccesosInput, UsuarioUncheckedUpdateWithoutAccesosInput>
    create: XOR<UsuarioCreateWithoutAccesosInput, UsuarioUncheckedCreateWithoutAccesosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutAccesosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutAccesosInput, UsuarioUncheckedUpdateWithoutAccesosInput>
  }

  export type UsuarioUpdateWithoutAccesosInput = {
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
    propietario?: PropietarioUpdateOneWithoutUsuarioNestedInput
    usuarioClinicas?: UsuarioClinicaUpdateManyWithoutUsuarioNestedInput
    verificacionesSMS?: VerificacionSMSUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutAccesosInput = {
    id?: IntFieldUpdateOperationsInput | number
    correo?: StringFieldUpdateOperationsInput | string
    contraseña?: StringFieldUpdateOperationsInput | string
    rol?: EnumRolFieldUpdateOperationsInput | $Enums.Rol
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    ultimaConexion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activo?: BoolFieldUpdateOperationsInput | boolean
    verificadoEmail?: BoolFieldUpdateOperationsInput | boolean
    propietarioId?: NullableIntFieldUpdateOperationsInput | number | null
    usuarioClinicas?: UsuarioClinicaUncheckedUpdateManyWithoutUsuarioNestedInput
    verificacionesSMS?: VerificacionSMSUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioClinicaCreateManyUsuarioInput = {
    id?: number
    clinicaId: number
  }

  export type AccesoCreateManyUsuarioInput = {
    id?: number
    ip: string
    fecha?: Date | string
    tipoAcceso: $Enums.TipoAcceso
  }

  export type VerificacionSMSCreateManyUsuarioInput = {
    id?: number
    telefono: string
    codigo: string
    usado?: boolean
    creadoEn?: Date | string
    expiradoEn: Date | string
    intentosFallidos?: number
  }

  export type UsuarioClinicaUpdateWithoutUsuarioInput = {
    clinica?: ClinicaUpdateOneRequiredWithoutUsuarioClinicasNestedInput
  }

  export type UsuarioClinicaUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    clinicaId?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioClinicaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    clinicaId?: IntFieldUpdateOperationsInput | number
  }

  export type AccesoUpdateWithoutUsuarioInput = {
    ip?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAcceso?: EnumTipoAccesoFieldUpdateOperationsInput | $Enums.TipoAcceso
  }

  export type AccesoUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAcceso?: EnumTipoAccesoFieldUpdateOperationsInput | $Enums.TipoAcceso
  }

  export type AccesoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoAcceso?: EnumTipoAccesoFieldUpdateOperationsInput | $Enums.TipoAcceso
  }

  export type VerificacionSMSUpdateWithoutUsuarioInput = {
    telefono?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    expiradoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    intentosFallidos?: IntFieldUpdateOperationsInput | number
  }

  export type VerificacionSMSUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    telefono?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    expiradoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    intentosFallidos?: IntFieldUpdateOperationsInput | number
  }

  export type VerificacionSMSUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    telefono?: StringFieldUpdateOperationsInput | string
    codigo?: StringFieldUpdateOperationsInput | string
    usado?: BoolFieldUpdateOperationsInput | boolean
    creadoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    expiradoEn?: DateTimeFieldUpdateOperationsInput | Date | string
    intentosFallidos?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioClinicaCreateManyClinicaInput = {
    id?: number
    usuarioId: number
  }

  export type UsuarioClinicaUpdateWithoutClinicaInput = {
    usuario?: UsuarioUpdateOneRequiredWithoutUsuarioClinicasNestedInput
  }

  export type UsuarioClinicaUncheckedUpdateWithoutClinicaInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioClinicaUncheckedUpdateManyWithoutClinicaInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}